---
title: "Network structure"
author:
  - name: "Paolo Bosetti"
    affiliations: 
      - name: "University of Trento"
date: 06/04/2025
date-modified: today
format: html
# format: 
#   html:
#     toc: true
#   pdf:
#     toc: true

categories: [template, basics, easy]
abstract: |
  Illustrate a typical MADS network structure and its requirements.
---

# Architecture

The typical architecture of a MADS network can be represented as:

```{dot}
//| label: fig-net
//| fig-cap: "MADS Network"
//| fig-width: 6
//| fig-height: 3
digraph "MADS Network" {
  rankdir=LR
  bgcolor="#ffffff00"
  node[shape="rect", style=filled, fillcolor="#ffffff"]

  p1[label="Plugin 1", shape=cds]
  a1[label="Agent 1\n(source)"]
  p2[label="Plugin 2", shape=cds]
  a2[label="Agent 2\n(filter)"]
  p3[label="Plugin 3", shape=cds]
  a3[label="Agent 3\n(sink)"]
  a4[label="Monolithic\nAgent (filter)"]
  mongo[label="MongoDB", shape=cylinder]
  
  p1 -> a1[arrowhead=none]
  p2 -> a2[arrowhead=none]
  p3 -> a3[arrowhead=none]

  a1->broker
  a2->broker[dir=both]
  a3->broker[dir=back]
  a4->broker[dir=both]

  broker->logger
  logger->mongo[label="BSON", style=dashed]
}
```

::: callout-important
Remember that the above schematic represent *processes*, regardless the physical machine on which they are being executed.

For example, the whole network could run on a single workstation, or it could be conversely distributed over multiple devices connected to the same IP network, each device running a single process/node.
:::


In the figure @fig-net, the solid lines represent a [ZeroMQ](https://zeromq.org) connection over TCP/IP, which uses compressed JSON as a data encoding protocol. Compression is preformed with the [snappy](https://github.com/google/snappy) library. The dashed line, conversely, represents the proprietary MongoDB protocol, with data serialized as BSON (Binary-JSON).


## The broker

What is the broker purpose?

The broker solves the issue of knowing multiple network addresses when you have a number of devices participating to the same distributed system.

With the aid of the broker, any separate device partaking to the MADS network only needs to know a single hostname/IP address: that of the machine running the broker.

::: callout-warning
There can only be a single broker per network.
:::

Running the broker is quite simple:

```sh
mads broker
```

## The agents

Agents can be:

* **monolithic**: implemented as a single executable inheriting the `Mads::Agent` C++ class.
* **plug-in**: a single executable that on runtime loads a proper plug-in (i.e. a dynamically loaded library)

Regardless the type, agent can have three different behaviors:

- **source**: they provide information to the network (e.g. by reading sensors)
- **filter**: they operate and transform received information
- **sink**: they consume information received from the network (e.g. to store or visualize)

The MADS installer provides three general purpose agents, aptly named `source`, `filter`, and `sink`, that are designe do load proper plugins. The command `mads plugin` can be used to generate a suitable template for a new plugin to be developed.


## Network layout

At the bare minimum, a MADS network requires:

- the broker
- the MongoDB database
- the logger agent

The MADS installers provide broker and logger, but MongoDB must be installed separatedly. The easiest route is to it via Docker.

Ideally, broker, logger and database should run on a single machine, having enough resources to store the data flow on the database, while agents can be distributed over multiple device. 

::: callout-note
According to our testing, Linux is the best choice for running MADS broker and logger in terms of performance.
:::

Any other agent can be run on the same machine or on a separate machine. In the latter case, it must be started with the `-s` option stating the broker address, e.g.: `-s tcp://<hostname>:9092`, where `<hostname>` shall be replaced with the proper host name, if available, or with the machine IP address. This is the only address that any agent needs to know in order to connect to the MADS network.

To help you find out the proper address, you can use the `-n list` broker option:

```bash
> mads broker -n list
Reading settings from /Users/p4010/usr/local/etc/mads.ini [broker]
Using network interface list
Available network adapters:
[       lo0] - 127.0.0.1
[       en0] - 192.168.1.220
[ bridge100] - 198.19.249.3
Binding broker frontend (XSUB) at tcp://*:9090
Binding broker backend (XPUB) at tcp://*:9091
Binding broker shared settings (REP) at tcp://*:9092
Timecode FPS: 25
Settings are provided via tcp://127.0.0.1:9092
CTRL-C to immediate exit
Type P to pause, R to resume, I for information, Q to clean quit, X to restart and reload settings
```

This shows that the host has three network interfaces. The public one is probably `en0` (your names may vary). Now quit the broker and relaunch it as:

```bash
> mads broker -n en0
Reading settings from /Users/p4010/usr/local/etc/mads.ini [broker]
Using network interface en0
Binding broker frontend (XSUB) at tcp://*:9090
Binding broker backend (XPUB) at tcp://*:9091
Binding broker shared settings (REP) at tcp://*:9092
Timecode FPS: 25
Settings are provided via tcp://192.168.1.220:9092
CTRL-C to immediate exit
Type P to pause, R to resume, I for information, Q to clean quit, X to restart and reload settings
```

Look at the line `Settings are provided via tcp://192.168.1.220:9092`: that is the address that you must use to start any agent in the network, e.g.:

```bash
mads feedback -s tcp://192.168.1.220:9092
```

::: callout-important
The `-n` command line option **has no effect** on how the broker operates. Its only purpose is to help you find out the proper address to use when starting agents that run on different machines or devices.
:::


# Where to go next

Once you have the bare minimum running, the next step is to configure and customize your distributed steps. In detail, you will have to:

1. learn how to develop your custom agents. This can be done in three ways:
   * by developing your own monolithic agent, using the MADS C++17 library ([hardest](/guides/monolithic_agents.html), high performance and maximum flexibility)
   * by implementing a C++17 plugin ([hard](/guides/plugins.html), high performance, some compromise in flexibility)
   * by using the Python wrapper agent and implementing the details in Python ([easy](/guides/python_agent.html), limited performance and flexibility)
2. [learn](/guides/services.html) how to make your agents into **services** (only on linux)
3. [learn](/guides/timing.qmd) how to synchronize time on multiple devices
4. [learn](/guides/mongodb.qmd) how to analyze the data collected by the MongoDB database
