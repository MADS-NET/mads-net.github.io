<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>MADS</title>
<link>https://mads-net.github.io/guides.html</link>
<atom:link href="https://mads-net.github.io/guides.xml" rel="self" type="application/rss+xml"/>
<description>MADS - Multi-Agent Distributed System</description>
<generator>quarto-1.7.30</generator>
<lastBuildDate>Thu, 10 Jul 2025 22:00:00 GMT</lastBuildDate>
<item>
  <title>HDF5 Logger</title>
  <dc:creator>Paolo Bosetti</dc:creator>
  <link>https://mads-net.github.io/guides/hdf5.html</link>
  <description><![CDATA[ 




<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>By default, MADS enable capturing data produced in the network to a MongoDB database, one topic per table. This is very effective and has some advantages:</p>
<ul>
<li><strong>concurrency</strong>: it is possible to access the database while the data acquisition is still running, even from multiple clients</li>
<li><strong>persistence</strong>: the data is stored in a database, which is designed to handle large amounts of data and provide fast access; MongoDB datapases can also be <strong>replicated</strong> and sharded, which allows for high availability, scalability, and resiliency</li>
<li><strong>querying</strong>: the data can be queried using the MongoDB query language, which is powerful and flexible; MongoDB <strong>aggregations</strong> can be defined as read-only tables, which can offload the processing from the client side and allow for complex data analysis</li>
<li><strong>visualization</strong>: the data can be visualized using tools like MongoDB Compass, which provides a graphical interface to explore the data</li>
</ul>
<p>On the other hand, for simpler tasks this can prove an overkill. Furthermore, if forces the user to learn the MongoDB query language, which is not always necessary. For these reasons, MADS provides a file-based logging system, which is simpler to use and does not require a database.</p>
<p>Since data generted by MADS can have a complex and schema-free structure, a simple table-oriented logging is not sufficient, unless we would revert to multiple flat-files, which can turn too messy pretty quickly. For this reason, MADS uses the <a href="https://www.hdfgroup.org/solutions/hdf5/">HDF5</a> format, which is a hierarchical data format that allows for storing complex data structures in a single file. HDF5 is widely used in scientific computing and data analysis, and it is supported by many libraries and tools.</p>
<p>A common use for HDF5 is to store and retrieve data used for training machine learning models, given that the format has a good support within Python and other scripting languages (as GNU-R) used for data analysis.</p>
</section>
<section id="the-hdf5-sink-plugin" class="level1">
<h1>The HDF5 Sink Plugin</h1>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>While the MongoDB logger agent (<code>mads logger</code>) comes pre-packaged with MADS, the HDF5 logger is a plugin that needs to be compiled and installed separately. To install it, run the following commands <strong>on the machine where you want the logs to be saved</strong>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--depth</span> 1 https://github.com/MADS-Net/hdf5_plugin.git</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> hdf5_plugin</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmake</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Bbuild</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-DCMAKE_INSTALL_PREFIX</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmake</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--target</span> install</span></code></pre></div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Building the HDF5 Plugin
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Follow the instructions on <a href="https://github.com/MADS-Net/hdf5_plugin" class="uri">https://github.com/MADS-Net/hdf5_plugin</a> when building on Windows.</li>
<li>Some CMake versions on Linux cannot compile successfully the project when a parallel build is enabled (<code>-j</code> option). If you encounter issues, try to build the project without parallelization, at least for the first build when the HDF5 library is compiled.</li>
</ul>
</div>
</div>
<p>Confirm that the plugin has been installed correctly by running:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--plugins</span></span></code></pre></div>
<p>which shall also report the <code>hdf5_writer.plugin</code> entry.</p>
</section>
<section id="configuration" class="level2">
<h2 class="anchored" data-anchor-id="configuration">Configuration</h2>
<p>As any agent, the plugin needs a proper entry in the MADS configuration file <code>mads.ini</code>. The relevant configuration parameters are:</p>
<ul>
<li><code>sub_topic</code>: the array of topics that we want to log</li>
<li><code>filename</code>: the full path name to the HDF5 file taht we want to create</li>
<li><code>keypaths</code>: a dictionary of entries that we want to save (see below for details)</li>
<li><code>keypath_separator</code>: the separator used to split the keypaths (default is <code>.</code>)</li>
</ul>
<p>Let’s consider an example. We want to log the data collected by an agent running the <a href="https://github.com/MADS-NET/arduino_plugin"><code>arduino_plugin</code></a>, which produces the following JSON data structure on the topic <code>arduino</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"data"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"AI1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"AI2"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"AI3"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"AI4"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"AI5"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">165</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"DI1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"DI2"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"DI3"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-12">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hostname"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mads-agent.local"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"millis"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150679</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-14">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"timecode"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">39198.68</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"timestamp"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"$date"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-07-11T10:53:18.716+0200"</span></span>
<span id="cb3-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The HDF5 logger always saves the field <code>timestamp</code>, <code>timecode</code>, and <code>hostname</code>. Everything else is optionally and must be specified on the INI file using <em>keypaths</em>. A keypath is a string representing the hierarchical path within the JSON structure. For example, the <code>["data"]["AI1"]</code> field can be accessed using the keypath <code>data.AI1</code>, where the field separator is the dot (<code>.</code>) by default, and can be changed using the <code>keypath_separator</code> parameter.</p>
<p>A valid INI section would then be:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[hdf5_writer]</span></span>
<span id="cb4-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sub_topic</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arduino"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">filename</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/test.h5"</span></span>
<span id="cb4-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">keypaths</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"arduino"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.AI1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.AI2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]}</span></span>
<span id="cb4-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">keypath_separator</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span></span></code></pre></div>
<p>Whereas, if we wanted to capture data from two different topics, we would do something like:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[hdf5_writer]</span></span>
<span id="cb5-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sub_topic</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arduino"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temp_sensor"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">filename</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/test.h5"</span></span>
<span id="cb5-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">keypaths</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"arduino"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.AI1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.AI2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">], </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"temp_sensor"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.Temperature"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.Humidity"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]}</span></span>
<span id="cb5-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">keypath_separator</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span></span></code></pre></div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that the TOML standard used for <code>mads.ini</code> forbids newlines within a dictionary field, so that the <code>keypaths</code> field must be on a single line!</p>
<p>As an alternative, you can split the dictionary using <em>sub-tables</em>:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[hdf5_writer]</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sub_topic</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arduino"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temp_sensor"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">filename</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/test.h5"</span></span>
<span id="cb6-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">keypath_separator</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[hdf5_writer.keypaths]</span></span>
<span id="cb6-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">arduino</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.AI1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.AI2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">temp_sensor</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.Temperature"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.Humidity"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</div>
</div>
</section>
<section id="execution" class="level2">
<h2 class="anchored" data-anchor-id="execution">Execution</h2>
<p>Now that the plugin is installed and configured, you can use it as a sink plugin:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> sink <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> tcp://broker.host:9092 hdf5_writer.plugin</span></code></pre></div>
<p>Of course, if the plugin runs on the same broker machine, you can just use <code>mads sink hdf5_writer.plugin</code>. The initial output is something like:</p>
<pre><code>Agent: hdf5_writer
  Settings file:    tcp://localhost:9092
  Pub endpoint:     tcp://localhost:9090
  Pub topic:        hdf5_writer
  Sub endpoint:     tcp://localhost:9091
  Sub topics:       arduino topic2 control
  Compression:      enabled
  Timecode FPS:     25
  Timecode offset:  0 s
Searching for installed plugin in the default location /Users/p4010/usr/local/lib
  Plugin:           /usr/local/lib/hdf5_writer.plugin (loaded as hdf5_writer)
  File name         /tmp/hdf5_plugin/test.h5
  Keypath sep.      .
  Keypaths          arduino.timecode, arduino.timestamp, arduino.hostname, arduino.data.AI1, arduino.data.AI2, temp_sensor.timecode, temp_sensor.timestamp, temp_sensor.hostname, temp_sensor.data.Temperature, temp_sensor.data.Humidity (total: 10)
Sink plugin started</code></pre>
<p>The content of the HDF5 file can be quickly inspected using the <code>HDFView</code> GUI tool:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mads-net.github.io/guides/images/HDFView.png" class="img-fluid figure-img"></p>
<figcaption>An overview of the captured data</figcaption>
</figure>
</div>
<p>As we see, within the HDF5 file data are collected into <strong>groups</strong> (folders), one for each topic, and <strong>datasets</strong> (tables), one for each keypath. The name of the dataset corresponds to the keypath:</p>
<ul>
<li>when the keypath produces a scalar, the dataset is a column vector (1-column table)</li>
<li>when the keypath produces a vector, the dataset is a 2D table with one column per element of the vector</li>
<li>timecode and timestamp are collected as vectors (same length of any other table)</li>
<li>timecode is stored as a string according to ISO 8601 format, which is the default for MADS</li>
</ul>


</section>
</section>

 ]]></description>
  <category>sink</category>
  <category>hdf5</category>
  <category>logging</category>
  <category>data</category>
  <guid>https://mads-net.github.io/guides/hdf5.html</guid>
  <pubDate>Thu, 10 Jul 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>OTA Plugins</title>
  <dc:creator>Paolo Bosetti</dc:creator>
  <link>https://mads-net.github.io/guides/OTA_plugins.html</link>
  <description><![CDATA[ 




<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>Suppose that you have a MADS network made by a relatively large number of devices, each running one or more agents. You want to update the plugins loaded by the agents. If you have only a few devices (say 2–3), you can manually copy the plugin files to each device. But if you have many devices, this is not practical and it is also error prone, because you need to keep track of which devices have been updated and which haven’t.</p>
<p>This use case is where the idea of being able to load plugins OTA comes from. The broker can provide the plugin files to the agents, which can then load them dynamically. This allows you to update the plugins without having to manually copy the files to each device: only the broker needs to have the plugin files, and the agents will load them automatically. <strong>There is only one copy of each plugin, and no risk of mismatching versions</strong>.</p>
</section>
<section id="how-it-works" class="level1">
<h1>How it works</h1>
<p>Upon launch, each agent needs to load its settings file. By default, the agent assumes that it is running on the same device of the broker, so it tries and load the <code>mads.ini</code> file from the MADS prefix directory (equivalent to <code>$(mads -p)/etc</code>). If the agent is running on a different device, it must load the settings <strong>from the broker</strong>. This is done by providing the <code>-s</code> command line option to the agent, which specifies the broker address and port that provides the settings file (typ. port 9093). For example:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> tcp://mads-broker.local:9093 my_datasource.plugin</span></code></pre></div>
<p>When the <code>-s</code> option contains a TCP URI address, the agent opens a special ZeroMQ communication channel to the broker, requesting for settings. To this request, the broker replies with a copy of the <code>mads.ini</code> file <strong>as loaded by the broker itself</strong>.</p>
<p>Starting from MADS 1.3.0, the <code>mads.ini</code> file can contain, for each section, a new option called <code>attachment</code>. When this option is provided for an agent, the broker attaches to the INI file copy a binary attachment, read form the file path specified in the option. For example, the following <code>mads.ini</code> file:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[my_datasource]</span></span>
<span id="cb2-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">attachment </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "/path/to/my_datasource.plugin"</span></span></code></pre></div>
<p>will cause the broker to attach the file <code>/path/to/my_datasource.plugin</code> to the <code>mads.ini</code> file copy sent to the agent. The agent will then save the attached plugin to a temporary folder and load it dynamically.</p>
</section>
<section id="implementation-details" class="level1">
<h1>Implementation details</h1>
<p>There are a number of things to keep in mind when using this feature:</p>
<ul>
<li>how to define the <strong>plugin and the agent name</strong></li>
<li>how to deal with plugins compiled for <strong>different architectures</strong></li>
<li>what happens if a plugin is provided as attachment <strong>and also</strong> on the command line</li>
</ul>
<section id="plugin-and-agent-names" class="level2">
<h2 class="anchored" data-anchor-id="plugin-and-agent-names">Plugin and agent names</h2>
<p>In MADS, there are three agents able to load plugins: <code>source</code>, <code>filter</code>, and <code>sink</code>. As for any agent, the INI section to be loaded is defined by the <em>agent name</em>. In turn, the latter is defined as:</p>
<ul>
<li>the name of the agent executable for monolithic plugins</li>
<li>the name of the plugin for <code>source</code>, <code>filter</code>, and <code>sink</code></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>In reality, there is also the <code>worker</code> agent (see <a href="../guides/worker.html">here</a>), which behaves as a filter agent but it is designed for a 1 dealer / n worker scenario for parallel computing, where a single dealer agent dispatches a list of computations to a number of identical workers in a round-robin fashion. The agent name for a worker is <strong>mandatory</strong> (no default).</p>
</div>
</div>
<p>Also, note that <code>source</code>, <code>filter</code>, and <code>sink</code> agents can be called <strong>without a plugin</strong>: in this case, they run as general-purpose agents that deal with input and output data (as valid JSON strings) via <strong>pipes</strong>. When this happen, the agent names are <code>publish</code> for the <code>source</code> agent, <code>bridge</code> for the <code>filter</code> agent, and <code>feedback</code> for the <code>sink</code> agent.</p>
<p>The name of an agent can be always be overridden by the <code>-n</code> command line option, which allows to specify a custom name for the agent. This is useful, for example, when you want to run multiple instances of the same agent with different settings.</p>
<p>Now, since the OTA loading of the plugin happens <strong>after</strong> the agent has loaded its settings, the agent name <strong>must be specified</strong> with the <code>-n</code> CLI option, otherwise would simply launch as general purpose agent with default names.</p>
<p>For example, if the <code>mads.ini</code> file contains the <code>[my_datasource]</code> section as above, the agent must be launched as:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> tcp://mads-broker.local:9093 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> my_datasource</span></code></pre></div>
</section>
<section id="dealing-with-architectures" class="level2">
<h2 class="anchored" data-anchor-id="dealing-with-architectures">Dealing with architectures</h2>
<p>When the plugin is provided as an attachment, the broker will send a copy of the file to the agent, which will save it to a temporary folder and load it dynamically. This means that the plugin must be compatible with the architecture of the device running the agent.</p>
<p>Now suppose that we want to run the same plugin on different devices, some of which are ARM-based and some are x86-based. If the plugin is compiled for a specific architecture, it will not work on the other architecture.</p>
<p>The solution follows these steps:</p>
<ul>
<li><p>compile two plugin versions, one for each architecture, and copy both files on the broker filesystem. Call them, for example, <code>my_datasource_arm.plugin</code> and <code>my_datasource_x86.plugin</code></p></li>
<li><p>in the <code>mads.ini</code> file, define two sections, one for each architecture with different names:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[my_datasource_arm]</span></span>
<span id="cb4-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">attachment </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "/path/to/my_datasource_arm.plugin"</span></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[my_datasource_x86]</span></span>
<span id="cb4-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">attachment </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "/path/to/my_datasource_x86.plugin"</span></span></code></pre></div></li>
<li><p>when launching the agent, specify the correct section name with the <code>-n</code> option, depending on the architecture of the device running the agent:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> tcp://mads-broker.local:9093 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> my_datasource_arm</span></code></pre></div></li>
</ul>
<p>Note that, when compiling a plugin, the <code>CMakeLists.txt</code> file in the plugin project has an option to append an architecture suffix to the generated plugin file: if you configure the project as:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmake</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Bbuild</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-DPLUGIN_SUFFIX</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arm <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-DCMAKE_INSTALL_PREFIX</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>then the plugin will be compiled as <code>my_datasource_arm.plugin</code> (assuming the plugin name is <code>my_datasource</code>). Of course, versions for non-native architectures must be cross-compiled or compiled in a virtual machine or on the target device itself.</p>
</section>
<section id="command-line-vs.-attachment" class="level2">
<h2 class="anchored" data-anchor-id="command-line-vs.-attachment">Command line vs.&nbsp;attachment</h2>
<p>Note that command line options always override the settings in the <code>mads.ini</code> file, so if you also specify the plugin name, the broker attachment will be ignored. For example, the following command will not load the plugin from the broker, but will use the one specified on the command line (on the local filesystem):</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> tcp://mads-broker.local:9093 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> my_datasource my_datasource.plugin</span></code></pre></div>
</section>
</section>
<section id="python-agent" class="level1">
<h1>Python agent</h1>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>This feature is only available from MADS v1.3.1 onwards.</p>
</div>
</div>
<p>The <code>attachment</code> feature can be also exploited by the <code>python_agent</code> monolithic agent. In this case, the <code>attachment</code> option must be the path of a valid and MADS-compatible Python module in the broker filesystem, and the remote agent will receive a copy of that file and load it upon launch. Note that the virtual environment still needs to be set up on the remote agents, exactly as if the agent was loading the Python module from the local filesystem.</p>
<p>Note that by default, attachments are saved as temporary files with the <code>.plugin</code> extension, which would normally prevent the Python agent from loading them. For this reason, the INI file also supports an <code>attachment_ext</code> option, which specifies the extension of the attachment file. For example:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[my_python_agent]</span></span>
<span id="cb8-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">attachment </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "/path/to/my_python_agent.py"</span></span>
<span id="cb8-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">attachment_ext </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "py" # WARNING: NO LEADING DOT!</span></span></code></pre></div>
<p>The <code>attachment_ext</code> option <strong>is mandatory</strong> unless you are giving a plugin file with the <code>.plugin</code> extension, which is the default. It must not contain the leading dot, so for example if you want to load a Python module called <code>my_python_agent.py</code>, you must specify <code>attachment_ext = "py"</code>.</p>


</section>

 ]]></description>
  <category>plugin</category>
  <category>OTA</category>
  <category>over-the-air</category>
  <category>intermediate</category>
  <guid>https://mads-net.github.io/guides/OTA_plugins.html</guid>
  <pubDate>Sun, 06 Jul 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Parallel computing with MADS</title>
  <dc:creator>Paolo Bosetti</dc:creator>
  <link>https://mads-net.github.io/guides/worker.html</link>
  <description><![CDATA[ 




<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>Sometimes, we want to explore a large parameter space, and run multiple time-demanding simulations over a grid of points in the parameter space. This is the case for example when we want to run a sensitivity analysis, or when we want to explore the effect of different parameters on the model output and perhaps find the optimal set of parameters for a given objective function.</p>
<p>If we have at hand a number of machines with multiple cores, we can effectively scale the problem by running each simulation on a different machine, or on a different core of the same machine. This is particularly useful when the simulations are independent and can be run in parallel.</p>
</section>
<section id="mads-solution" class="level1">
<h1>MADS solution</h1>
<p>MADS has two special agents, <code>dealer</code> and <code>worker</code>, that allow to distribute many different computations to a set of identical workers, in round-robin fashion. This is useful when you have many independent tasks that can be run in parallel, such as running multiple simulations or processing large datasets.</p>
<p>This configuration exploits ZeroMQ’s feature called <a href="https://zguide.zeromq.org/docs/chapter2/#Messaging-Patterns">“PUSH-PULL”</a> to distribute tasks among workers. The <code>dealer</code> agent acts as a task distributor, while the <code>worker</code> agents are responsible for executing the tasks. Once a <code>worker</code> completes a task, it sends the result back to the MADS net — which can then process or store the results as needed — and becomes available again for new tasks.</p>
<p>The scheme is illustrated in Figure Figure&nbsp;1. In this installation, the network has a broker, a logger (connected to the MongoDB database), and a generic source plugin, which is expected to generate the computational load, i.e., a sequence of <strong>input tasks</strong> (as JSON object). The source plugin can be freely implemented (monolithic, plugin, or even a python agent).</p>
<p>A special agent, called <code>dealer</code>, which is part of standard MADS distribution, is also connected to the broker. It also provides connection to the workers on an additional port, by default 9093 (blue arrows in Figure&nbsp;1).</p>
<div class="cell" data-fig-width="6" data-fig-height="3" data-layout-align="default">
<div class="cell-output-display">
<div id="fig-net" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-net-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div>
<svg width="576" height="288" viewbox="0.00 0.00 484.24 273.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 269)">
<title>Dealer-worker</title>
<polygon fill="transparent" stroke="transparent" points="-4,4 -4,-269 480.24,-269 480.24,4 -4,4"></polygon>
<!-- broker -->
<g id="node1" class="node">
<title>broker</title>
<polygon fill="#ffffff" stroke="black" points="145,-138 91,-138 91,-102 145,-102 145,-138"></polygon>
<text text-anchor="middle" x="118" y="-115.8" font-family="Times,serif" font-size="14.00">broker</text>
</g>
<!-- dealer -->
<g id="node3" class="node">
<title>dealer</title>
<polygon fill="#f0f0f0" stroke="black" points="236,-168 182,-168 182,-132 236,-132 236,-168"></polygon>
<text text-anchor="middle" x="209" y="-145.8" font-family="Times,serif" font-size="14.00">dealer</text>
</g>
<!-- broker&#45;&gt;dealer -->
<g id="edge6" class="edge">
<title>broker-&gt;dealer</title>
<path fill="none" stroke="black" d="M145.22,-128.84C153.73,-131.71 163.32,-134.94 172.4,-138"></path>
<polygon fill="black" stroke="black" points="171.37,-141.35 181.97,-141.22 173.61,-134.71 171.37,-141.35"></polygon>
</g>
<!-- logger -->
<g id="node10" class="node">
<title>logger</title>
<polygon fill="#ffffff" stroke="black" points="236,-36 182,-36 182,0 236,0 236,-36"></polygon>
<text text-anchor="middle" x="209" y="-13.8" font-family="Times,serif" font-size="14.00">logger</text>
</g>
<!-- broker&#45;&gt;logger -->
<g id="edge15" class="edge">
<title>broker-&gt;logger</title>
<path fill="none" stroke="black" d="M127.78,-101.99C135.65,-86.99 148.21,-65.65 163,-50 166.28,-46.52 170,-43.19 173.84,-40.07"></path>
<polygon fill="black" stroke="black" points="175.99,-42.83 181.84,-34 171.76,-37.26 175.99,-42.83"></polygon>
</g>
<!-- source -->
<g id="node2" class="node">
<title>source</title>
<polygon fill="#ffffff" stroke="black" points="54,-138 0,-138 0,-102 54,-102 54,-138"></polygon>
<text text-anchor="middle" x="27" y="-115.8" font-family="Times,serif" font-size="14.00">source</text>
</g>
<!-- source&#45;&gt;broker -->
<g id="edge5" class="edge">
<title>source-&gt;broker</title>
<path fill="none" stroke="black" d="M54.22,-120C62.55,-120 71.91,-120 80.82,-120"></path>
<polygon fill="black" stroke="black" points="80.97,-123.5 90.97,-120 80.97,-116.5 80.97,-123.5"></polygon>
</g>
<!-- w1 -->
<g id="node5" class="node">
<title>w1</title>
<polygon fill="#f0f0f0" stroke="black" points="380.44,-265 314.14,-265 314.14,-229 380.44,-229 380.44,-265"></polygon>
<text text-anchor="middle" x="347.29" y="-242.8" font-family="Times,serif" font-size="14.00">worker 1</text>
</g>
<!-- dealer&#45;&gt;w1 -->
<g id="edge7" class="edge">
<title>dealer-&gt;w1</title>
<path fill="none" stroke="blue" d="M233.1,-168.26C239.78,-173.43 247.13,-179.01 254,-184 272.31,-197.31 293.1,-211.57 310.3,-223.15"></path>
<polygon fill="blue" stroke="blue" points="308.69,-226.28 318.94,-228.95 312.59,-220.47 308.69,-226.28"></polygon>
</g>
<!-- w2 -->
<g id="node6" class="node">
<title>w2</title>
<polygon fill="#f0f0f0" stroke="black" points="380.44,-103 314.14,-103 314.14,-67 380.44,-67 380.44,-103"></polygon>
<text text-anchor="middle" x="347.29" y="-80.8" font-family="Times,serif" font-size="14.00">worker 2</text>
</g>
<!-- dealer&#45;&gt;w2 -->
<g id="edge8" class="edge">
<title>dealer-&gt;w2</title>
<path fill="none" stroke="blue" d="M236.28,-137.47C255.64,-128.24 282.35,-115.49 304.61,-104.88"></path>
<polygon fill="blue" stroke="blue" points="306.32,-107.94 313.84,-100.48 303.31,-101.62 306.32,-107.94"></polygon>
</g>
<!-- w3 -->
<g id="node7" class="node">
<title>w3</title>
<polygon fill="#f0f0f0" stroke="black" points="380.44,-157 314.14,-157 314.14,-121 380.44,-121 380.44,-157"></polygon>
<text text-anchor="middle" x="347.29" y="-134.8" font-family="Times,serif" font-size="14.00">worker 3</text>
</g>
<!-- dealer&#45;&gt;w3 -->
<g id="edge9" class="edge">
<title>dealer-&gt;w3</title>
<path fill="none" stroke="blue" d="M236.28,-147.88C255.38,-146.34 281.64,-144.22 303.71,-142.44"></path>
<polygon fill="blue" stroke="blue" points="304.16,-145.91 313.84,-141.62 303.59,-138.93 304.16,-145.91"></polygon>
</g>
<!-- w4 -->
<g id="node8" class="node">
<title>w4</title>
<polygon fill="#f0f0f0" stroke="black" points="380.44,-211 314.14,-211 314.14,-175 380.44,-175 380.44,-211"></polygon>
<text text-anchor="middle" x="347.29" y="-188.8" font-family="Times,serif" font-size="14.00">worker 4</text>
</g>
<!-- dealer&#45;&gt;w4 -->
<g id="edge10" class="edge">
<title>dealer-&gt;w4</title>
<path fill="none" stroke="blue" d="M236.28,-158.29C255.46,-164.34 281.88,-172.68 304.01,-179.66"></path>
<polygon fill="blue" stroke="blue" points="303.25,-183.09 313.84,-182.76 305.36,-176.42 303.25,-183.09"></polygon>
</g>
<!-- mongo -->
<g id="node4" class="node">
<title>mongo</title>
<path fill="#ffffff" stroke="black" d="M385.19,-32.73C385.19,-34.53 368.2,-36 347.29,-36 326.38,-36 309.4,-34.53 309.4,-32.73 309.4,-32.73 309.4,-3.27 309.4,-3.27 309.4,-1.47 326.38,0 347.29,0 368.2,0 385.19,-1.47 385.19,-3.27 385.19,-3.27 385.19,-32.73 385.19,-32.73"></path>
<path fill="none" stroke="black" d="M385.19,-32.73C385.19,-30.92 368.2,-29.45 347.29,-29.45 326.38,-29.45 309.4,-30.92 309.4,-32.73"></path>
<text text-anchor="middle" x="347.29" y="-13.8" font-family="Times,serif" font-size="14.00">MongoDB</text>
</g>
<!-- w1&#45;&gt;broker -->
<g id="edge11" class="edge">
<title>w1-&gt;broker</title>
<path fill="none" stroke="black" d="M314.13,-242.48C279.56,-236.55 223.93,-223.84 182,-199 161.18,-186.67 144.5,-164.68 133.55,-147.03"></path>
<polygon fill="black" stroke="black" points="136.47,-145.09 128.35,-138.27 130.45,-148.66 136.47,-145.09"></polygon>
</g>
<!-- p -->
<g id="node9" class="node">
<title>p</title>
<polygon fill="#ffffff" stroke="black" points="434.24,-153 476.24,-153 476.24,-177 434.24,-177 422.24,-165 434.24,-153"></polygon>
<text text-anchor="middle" x="449.24" y="-160.8" font-family="Times,serif" font-size="14.00">Plugin</text>
</g>
<!-- w1&#45;&gt;p -->
<g id="edge1" class="edge">
<title>w1-&gt;p</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M373.56,-228.99C377.51,-226.04 381.52,-222.98 385.24,-220 400.1,-208.12 416.25,-194 428.47,-183.04"></path>
</g>
<!-- w2&#45;&gt;broker -->
<g id="edge12" class="edge">
<title>w2-&gt;broker</title>
<path fill="none" stroke="black" d="M313.96,-89.98C271.93,-96.45 198.75,-107.72 155,-114.46"></path>
<polygon fill="black" stroke="black" points="154.42,-111 145.07,-115.99 155.49,-117.92 154.42,-111"></polygon>
</g>
<!-- w2&#45;&gt;p -->
<g id="edge2" class="edge">
<title>w2-&gt;p</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M373.51,-103.07C377.47,-106.01 381.49,-109.06 385.24,-112 399.64,-123.29 415.39,-136.54 427.54,-146.97"></path>
</g>
<!-- w3&#45;&gt;broker -->
<g id="edge13" class="edge">
<title>w3-&gt;broker</title>
<path fill="none" stroke="black" d="M314.07,-133.3C292.14,-129.67 262.41,-125.25 236,-123 208.96,-120.7 178.29,-119.98 155.14,-119.82"></path>
<polygon fill="black" stroke="black" points="155.08,-116.32 145.07,-119.79 155.06,-123.32 155.08,-116.32"></polygon>
</g>
<!-- w3&#45;&gt;p -->
<g id="edge3" class="edge">
<title>w3-&gt;p</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M380.47,-147.37C393.94,-150.87 409.39,-154.89 422.13,-158.21"></path>
</g>
<!-- w4&#45;&gt;broker -->
<g id="edge14" class="edge">
<title>w4-&gt;broker</title>
<path fill="none" stroke="black" d="M313.91,-195.68C279.65,-197.21 224.72,-195.89 182,-177 166.06,-169.96 151.42,-157.28 140.27,-145.66"></path>
<polygon fill="black" stroke="black" points="142.81,-143.25 133.47,-138.25 137.65,-147.99 142.81,-143.25"></polygon>
</g>
<!-- w4&#45;&gt;p -->
<g id="edge4" class="edge">
<title>w4-&gt;p</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M380.47,-183.99C393.94,-180.21 409.39,-175.88 422.13,-172.31"></path>
</g>
<!-- logger&#45;&gt;mongo -->
<g id="edge16" class="edge">
<title>logger-&gt;mongo</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M236.28,-18C254.09,-18 278.14,-18 299.21,-18"></path>
<polygon fill="black" stroke="black" points="299.28,-21.5 309.28,-18 299.28,-14.5 299.28,-21.5"></polygon>
<text text-anchor="middle" x="272.67" y="-22.2" font-family="Times,serif" font-size="14.00">BSON</text>
</g>
</g>
</svg>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-net-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Dealer-Worker
</figcaption>
</figure>
</div>
</div>
</div>
<p>A variable number of <code>worker</code> agents (also part of MADS distribution) are then connected to the <code>dealer</code> with a PUSH-PULL ZeroMQ socket, and also act as source agents towards the broker.</p>
<p>Workers are plugin-based agents, and typically all load the same plugin file (preferably obtained OTA).</p>
<p>As soon as the broker receives a new task from <code>source</code>, it dispatches it to the <code>dealer</code>, which then forwards it to the next available <code>worker</code>. The <code>worker</code> executes the task and sends the result back to the broker, which can then routes the results to any subscribed agent (e.g.&nbsp;the <code>logger</code>).</p>
</section>
<section id="resource-scaling" class="level1">
<h1>Resource scaling</h1>
<p>The worker instances in Figure&nbsp;1 can be fun on the same machine/device, or on different machine, in a way that is totally irrelevant and transparent to the MADS network. The only requirement is that the <code>dealer</code> and the <code>worker</code> agents are connected to the same broker, and that the <code>worker</code> agents are able to connect to the <code>dealer</code> on the port 9093 (or any other port specified in the configuration).</p>
<p>Of course, if the number of machines for running the workers becomes large enough, it would be impractical to manually install and load the workers on tens or hundreds of machines. In this case, it is possible to use a <em>container orchestration system</em> such as <strong>Kubernetes</strong> to automatically deploy and manage the worker instances.</p>
<p>In this case, we have a Kubernetes deployment that defines a containerized list of MADS worker agents, each then loading the computation plugin via OTA from the broker. Once the Kubernetes cluster is set up, scaling it is just a matter of adding more machines to the same cluster and dynamically request the desired number of replicas.</p>
<section id="example-deployment" class="level2">
<h2 class="anchored" data-anchor-id="example-deployment">Example deployment</h2>
<p>Kubernetes deployments are YAML files that declare the configuration for each instance. a workable example is:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apiVersion</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> apps/v1</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kind</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deployment</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> worker</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namespace</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> default</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicas</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selector</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matchLabels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> worker</span></span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">template</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> worker</span></span>
<span id="cb1-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">containers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> worker</span></span>
<span id="cb1-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p4010/mads:latest"</span></span>
<span id="cb1-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-s"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tcp://198.19.249.3:9092"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-n"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_worker_arm64"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb1-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resources</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">limits</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpu</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 200m</span></span>
<span id="cb1-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 500Mi</span></span>
<span id="cb1-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpu</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 100m</span></span>
<span id="cb1-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memory</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 200Mi</span></span>
<span id="cb1-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">containerPort</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9091</span></span>
<span id="cb1-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> zmq-in</span></span>
<span id="cb1-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">containerPort</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9092</span></span>
<span id="cb1-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> zmq-ini</span></span>
<span id="cb1-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">containerPort</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9093</span></span>
<span id="cb1-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> zmq-deal</span></span></code></pre></div>
<p>This is defining each worker as an instance of the <code>p4010/mads:latest</code> Docker image, which is the official MADS image on Docker Hub. The <code>args</code> field specifies the command line arguments to pass to the worker agent, including the broker address and the worker name. In this case, we are assuming that Kubernetes runs on an ARM64 architecture, and the worker name is set to <code>test_worker_arm64</code> (see <a href="../guides/OTA_plugins.html">OTA Plugins</a> for more details on the worker name).</p>
<p>With this configuration saved as `<code>manifest.yml</code>, we can deploy the workers to the Kubernetes cluster with the following command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> apply <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> manifest.yml</span></code></pre></div>
<p>This will start 5 replicas of the same worker instance, each loading the plugin OTA from the broker. If we want (and can) scale up the number of workers, we can do it transparently without disrupting any operation:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> scale deployments/worker <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--replicas</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>100</span></code></pre></div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>The maximum number of replicas shall be less or equal to the <strong>total number of cores in the Kubernetes cluster</strong>. If you try to scale up beyond that, CPU resources will be further subdivided among the workers, and each worker will get less CPU time, which may lead to performance degradation.</p>
</div>
</div>
<p>When we are done, we can scale down the number of workers to zero, or delete the deployment altogether:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kubectl</span> delete deployments worker</span></code></pre></div>
</section>
<section id="keeping-track-of-completed-tasks" class="level2">
<h2 class="anchored" data-anchor-id="keeping-track-of-completed-tasks">Keeping track of completed tasks</h2>
<p>The number of submitted and completed tasks can be easily monitored with a Python agent:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb5-2">agent_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sink"</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb5-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Python] Setting up sink..."</span>)</span>
<span id="cb5-6">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Python] Parameters: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> json.dumps(params))</span>
<span id="cb5-7">  state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submitted"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-8">  state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accepted"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-9"> </span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> deal_with_data():</span>
<span id="cb5-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> topic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dealer"</span>:</span>
<span id="cb5-12">    state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submitted"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> topic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_worker"</span>:</span>
<span id="cb5-14">    state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accepted"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-15">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\33</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[2K[Python] Submitted: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submitted"</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", Accepted: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accepted"</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", Pending: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submitted"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accepted"</span>]), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>Save this as <code>counter.py</code> in the folder <code>usr/local/scripts</code> under the MADS prefix directory (given by <code>mads -p</code>), add the following section to the INI file:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[counter]</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sub_topic </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ["dealer", "test_worker"]</span></span>
<span id="cb6-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">python_module </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "counter"</span></span></code></pre></div>
<p>then run the agent with the command:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> counter</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>plugin</category>
  <category>parallel computing</category>
  <category>advanced</category>
  <category>kubernetes</category>
  <category>docker</category>
  <guid>https://mads-net.github.io/guides/worker.html</guid>
  <pubDate>Sun, 06 Jul 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Services</title>
  <dc:creator>Paolo Bosetti</dc:creator>
  <link>https://mads-net.github.io/guides/services.html</link>
  <description><![CDATA[ 




<section id="why-services" class="level1">
<h1>Why services</h1>
<p>Agents are typically expected to run on boot: as soon as the machine or device starts, you want the agent to become immediately available. To do that, MADS offers a solution for quickly create a service for a given combination of MADS command and arguments.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>At the moment, this functionality is only available on Linux (Ubuntu or Debian). There are no immediate plans to extend it to MacOS or Windows.</p>
</div>
</div>
</section>
<section id="what-is-a-service" class="level1">
<h1>What is a service</h1>
<p>On Ubuntu or Debian Linux, a service is a INI file located in <code>/etc/systemd/system</code> that details a command to be executed on boot and its requirements. Once you have the service file installed, e.g.&nbsp;as <code>/etc/systemd/system/my_service.service</code>, you can:</p>
<ul>
<li>Enable/disable the service: <code>sudo systemctl enable|disable my_service</code>. If the service is disabled, It <strong>does not</strong> starts automatically.</li>
<li>Start the service manually: <code>sudo systemctl start my_service</code></li>
<li>Stop the service manually: <code>sudo systemctl stop my_service</code></li>
<li>Enquire the service status: <code>sudo systemctl status my_service</code></li>
</ul>
<p>So, if the service is enabled, it starts automatically on boot; if it is disabled, you can still start it with the <code>systemctl start</code> command.</p>
</section>
<section id="how-to-create-a-mads-service" class="level1">
<h1>How to create a MADS service</h1>
<p>Suppose that you knwo that the following command launches properly an agent:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> in0_01 arduino.plugin</span></code></pre></div>
<p>Now you want turn this command into a service. Just put <code>mads service &lt;service_name</code> in forn t of that command line, e.g.:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> service arduino source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> in0_01 arduino.plugin</span></code></pre></div>
<p>where <code>mads service arduino</code> means “create a service file called <code>mads-arduino</code>” (<code>mads-</code> is added automatically), and <code>source -i in0_01 arduino.plugin</code> is the proper command line for the <code>mads</code> command.</p>
<p>You should get an output like:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  __  __    _    ____  ____</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># |  \/  |  / \  |  _ \/ ___|</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># | |\/| | / _ \ | | | \___ \</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># | |  | |/ ___ \| |_| |___) |</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># |_|  |_/_/   \_\____/|____/</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linux Systemd service file for mads-arduino, a mads-source agent</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Notice that the settings file will be read from</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /usr/local/etc/mads.ini</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save this file to /etc/systemd/system/mads-arduino.service</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or run "sudo mads service publish source publish.plugin "</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then run "sudo systemctl enable mads-arduino.service"</span></span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[Unit]</span></span>
<span id="cb3-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Description</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">mads-arduino</span></span>
<span id="cb3-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">After</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">network.target</span></span>
<span id="cb3-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">StartLimitIntervalSec</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[Service]</span></span>
<span id="cb3-21"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Type</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">simple</span></span>
<span id="cb3-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Restart</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">always</span></span>
<span id="cb3-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">RestartSec</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">User</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">root</span></span>
<span id="cb3-25"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ExecStart</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/usr/local/bin/mads-source -i in0_01 arduino.plugin</span></span>
<span id="cb3-26"></span>
<span id="cb3-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[Install]</span></span>
<span id="cb3-28"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">WantedBy</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">multi-user.target</span></span></code></pre></div>
<p>As instructed in the comments, you shall check if everything looks fine, and if so, <strong>install</strong> the service file in the proper directory by simply re-executing the same command with <code>sudo</code> :</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> mads service arduino source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> in0_01 arduino.plugin</span></code></pre></div>
<p>A longer and more flexible path is to save the file locally, edit it to taste, then manually copy/move it to <code>/etc/systemd/system</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> service arduino source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> in0_01 arduino.plugin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> mads-arduino.service</span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># edit the file to taste</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> cp mads-arduino.service /usr/systemd/system/</span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The fist way is the suggested one, unless you really need to adjust the service file (and you know what you are doing).</p>
</div>
</div>
<p>Finally, enable the service with <code>sudo systemctl enable mads-arduino.service</code>.</p>
<p>Note that enabling the service does not makes it start: to do so, you either have to reboot the machine or to manually start with <code>sudo systemctl start mads-arduino.service</code>.</p>


</section>

 ]]></description>
  <category>intermediate</category>
  <category>OS</category>
  <category>setup</category>
  <category>easy</category>
  <guid>https://mads-net.github.io/guides/services.html</guid>
  <pubDate>Thu, 05 Jun 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Plugins</title>
  <dc:creator>Paolo Bosetti</dc:creator>
  <link>https://mads-net.github.io/guides/plugins.html</link>
  <description><![CDATA[ 




<section id="what-are-plugins" class="level1">
<h1>What are plugins</h1>
<p>Originally, MADS only allowed to develop monolitic agents: this required to write the whole executable code, including the management of command line arguments and loading of serrings from the INI file (either local or loaded from the broker). This solution is still possible (see <a href="monolithic_agents.html">the guide</a>) and allows maximum flexibility, but it requires a good knowledse of the MADS innards and is more tedious and error prone.</p>
<p>For this reason, we developed the plugin support: the common functionality of an agent are already available, and only the data management operations need to be implemented.</p>
</section>
<section id="behaviors-of-plugins" class="level1">
<h1>Behaviors of plugins</h1>
<p>Remember that there are three <a href="structure.html#the-agents"><em>behaviors</em> for plugins</a>:</p>
<ul>
<li>source: puts data into the MADS network</li>
<li>filter: transforms data</li>
<li>sink: consumes data</li>
</ul>
<p>As a consequences, there are three MADS subcommands to load a plugin, depending on its behavior: <code>mads source</code>, <code>mads filter</code>, and <code>mads sink</code>. They all take a mandatory argument that is the name or the path to a proper <em>plugin file</em>.</p>
<p>A plugin file is a compiled dynamic library with the extension <code>.plugin</code>. The <em>behavior</em> of a plugin is rigid: a <em>source</em> plugin cannot be loaded by a <em>filter</em> agent.</p>
</section>
<section id="how-to-create-a-plugin" class="level1">
<h1>How to create a plugin</h1>
<p>The <code>mads</code> command provides an utility to generate a template for a new plugin:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> mads <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plugin</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Usage:</span></span>
<span id="cb1-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plugin</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">OPTION...</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> name</span>
<span id="cb1-5"></span>
<span id="cb1-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-t,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span> arg         Type of the plugin</span>
<span id="cb1-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-d,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dir</span> arg          Directory of the plugin</span>
<span id="cb1-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-i,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--install-dir</span> arg  Directory where to install the plugin</span>
<span id="cb1-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-o,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--overwrite</span>        Overwrite existing files</span>
<span id="cb1-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-v,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span>          Print version</span>
<span id="cb1-11">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-h,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--help</span>             Print usage</span></code></pre></div>
<p>Suppose that you want to create a source plugin named <code>my_plugin</code>: then the command shall be <code>mads plugin -t source -d my_source my_source</code>. This will create a CMake stub project in the folder <code>my_source</code> that, once compiled, will produce a <code>my_source.plugin</code> library, setting CMake to install that file in the default MADS prefix path, as given by <code>mads -p</code>. The command line option <code>-i</code> can be used to override that path.</p>
</section>
<section id="how-to-configure-and-build" class="level1">
<h1>How to configure and build</h1>
<p>As suggested by the command output:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> my_source</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmake</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Bbuild</span> </span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make your changes</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmake</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-j6</span></span></code></pre></div>
<p>These steps are iterative, and probably need to tweak with the <code>CMakeLists.txt</code> file for adding third party libraries and other source/header files. The last command produces in the <code>build</code> folder two notable files:</p>
<ul>
<li><code>my_source.plugin</code>: the plugin proper;</li>
<li><code>my_source</code>: an executable generated by conditionally enabling the <code>&nbsp;main</code> function at the end of the <code>my_source.cpp</code> file.</li>
</ul>
<p>The second file can be used for checking that the plogin properly deals with the data, without the need of a MADS network available (broker etc.). Indeed, that executable does not even connect to the broker. Launch it as:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">build/my_source</span></span></code></pre></div>
<p>During development, you want to use this executable quite often to test what you are doing. You also have to tune the <code>main</code> function so that the dummy data are properly defined.</p>
<p>When the bare executable works, you can try to load the plugin with the proper agent: provided that the broker is running and the <code>mads.ini</code> file contains a proper <code>[my_source]</code> section, you load the plugin as:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> source build/my_source.plugin</span></code></pre></div>
<p>The agent name is the name of the plugin (i.e.&nbsp;<code>my_source</code>). If you need to override that name — for example, because you want to have different <em>identical</em> agents that load <em>different</em> settings — then you can use the <code>-n</code> command line option and match the proper <code>mads.ini</code> section.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>On MacOS, the plugin file <strong>can also be directly executed</strong>, so the <code>my_source</code> executable is not generated and the <code>my_source.plugin</code> can be both loaded from an agent or directly executed for testing.</p>
</div>
</div>
<section id="how-to-install-the-plugin" class="level2">
<h2 class="anchored" data-anchor-id="how-to-install-the-plugin">How to install the plugin</h2>
<p>Once the plugin is tested (both standalone and when loaded from an agent) it should be installed in the MADS tree. Remember that the command <code>mads -i</code> shows where plugins are expected to be installed (usually, <code>/usr/local/lib</code>). To install:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmake</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--install</span> build</span></code></pre></div>
<p>The you can launch it as agent with:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> source my_source.plugin</span></code></pre></div>
<p>And when you are satisfield with the result, you can make it a service as explained <a href="services.html">here</a>.</p>


</section>
</section>

 ]]></description>
  <category>advanced</category>
  <category>plugin</category>
  <category>development</category>
  <category>c++</category>
  <guid>https://mads-net.github.io/guides/plugins.html</guid>
  <pubDate>Thu, 05 Jun 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Network structure</title>
  <dc:creator>Paolo Bosetti</dc:creator>
  <link>https://mads-net.github.io/guides/structure.html</link>
  <description><![CDATA[ 




<section id="architecture" class="level1">
<h1>Architecture</h1>
<p>The typical architecture of a MADS network can be represented as:</p>
<div class="cell" data-fig-width="6" data-fig-height="3" data-layout-align="default">
<div class="cell-output-display">
<div id="fig-net" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-net-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div>
<svg width="576" height="288" viewbox="0.00 0.00 529.55 229.60" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 225.6)">
<title>MADS Network</title>
<polygon fill="transparent" stroke="transparent" points="-4,4 -4,-225.6 525.55,-225.6 525.55,4 -4,4"></polygon>
<!-- p1 -->
<g id="node1" class="node">
<title>p1</title>
<polygon fill="#ffffff" stroke="black" points="51.1,-212.8 -0.03,-212.8 -0.03,-188.8 51.1,-188.8 63.1,-200.8 51.1,-212.8"></polygon>
<text text-anchor="middle" x="31.53" y="-196.6" font-family="Times,serif" font-size="14.00">Plugin 1</text>
</g>
<!-- a1 -->
<g id="node2" class="node">
<title>a1</title>
<polygon fill="#ffffff" stroke="black" points="176.05,-221.4 114.33,-221.4 114.33,-180.2 176.05,-180.2 176.05,-221.4"></polygon>
<text text-anchor="middle" x="145.19" y="-205" font-family="Times,serif" font-size="14.00">Agent 1</text>
<text text-anchor="middle" x="145.19" y="-188.2" font-family="Times,serif" font-size="14.00">(source)</text>
</g>
<!-- p1&#45;&gt;a1 -->
<g id="edge1" class="edge">
<title>p1-&gt;a1</title>
<path fill="none" stroke="black" d="M63.34,-200.8C79.22,-200.8 98.5,-200.8 114.25,-200.8"></path>
</g>
<!-- broker -->
<g id="node9" class="node">
<title>broker</title>
<polygon fill="#ffffff" stroke="black" points="281.31,-119.8 227.31,-119.8 227.31,-83.8 281.31,-83.8 281.31,-119.8"></polygon>
<text text-anchor="middle" x="254.31" y="-97.6" font-family="Times,serif" font-size="14.00">broker</text>
</g>
<!-- a1&#45;&gt;broker -->
<g id="edge4" class="edge">
<title>a1-&gt;broker</title>
<path fill="none" stroke="black" d="M176.32,-181.71C181.14,-178.26 185.97,-174.56 190.31,-170.8 205.34,-157.78 220.41,-141.41 232.05,-127.89"></path>
<polygon fill="black" stroke="black" points="235.03,-129.78 238.82,-119.89 229.69,-125.26 235.03,-129.78"></polygon>
</g>
<!-- p2 -->
<g id="node3" class="node">
<title>p2</title>
<polygon fill="#ffffff" stroke="black" points="51.1,-152.8 -0.03,-152.8 -0.03,-128.8 51.1,-128.8 63.1,-140.8 51.1,-152.8"></polygon>
<text text-anchor="middle" x="31.53" y="-136.6" font-family="Times,serif" font-size="14.00">Plugin 2</text>
</g>
<!-- a2 -->
<g id="node4" class="node">
<title>a2</title>
<polygon fill="#ffffff" stroke="black" points="175.4,-161.4 114.97,-161.4 114.97,-120.2 175.4,-120.2 175.4,-161.4"></polygon>
<text text-anchor="middle" x="145.19" y="-145" font-family="Times,serif" font-size="14.00">Agent 2</text>
<text text-anchor="middle" x="145.19" y="-128.2" font-family="Times,serif" font-size="14.00">(filter)</text>
</g>
<!-- p2&#45;&gt;a2 -->
<g id="edge2" class="edge">
<title>p2-&gt;a2</title>
<path fill="none" stroke="black" d="M63.34,-140.8C79.35,-140.8 98.82,-140.8 114.64,-140.8"></path>
</g>
<!-- a2&#45;&gt;broker -->
<g id="edge5" class="edge">
<title>a2-&gt;broker</title>
<path fill="none" stroke="black" d="M184.86,-126.72C195.46,-122.86 206.91,-118.69 217.36,-114.89"></path>
<polygon fill="black" stroke="black" points="183.66,-123.43 175.46,-130.14 186.05,-130.01 183.66,-123.43"></polygon>
<polygon fill="black" stroke="black" points="218.8,-118.09 227,-111.38 216.41,-111.51 218.8,-118.09"></polygon>
</g>
<!-- p3 -->
<g id="node5" class="node">
<title>p3</title>
<polygon fill="#ffffff" stroke="black" points="51.1,-92.8 -0.03,-92.8 -0.03,-68.8 51.1,-68.8 63.1,-80.8 51.1,-92.8"></polygon>
<text text-anchor="middle" x="31.53" y="-76.6" font-family="Times,serif" font-size="14.00">Plugin 3</text>
</g>
<!-- a3 -->
<g id="node6" class="node">
<title>a3</title>
<polygon fill="#ffffff" stroke="black" points="175.4,-101.4 114.97,-101.4 114.97,-60.2 175.4,-60.2 175.4,-101.4"></polygon>
<text text-anchor="middle" x="145.19" y="-85" font-family="Times,serif" font-size="14.00">Agent 3</text>
<text text-anchor="middle" x="145.19" y="-68.2" font-family="Times,serif" font-size="14.00">(sink)</text>
</g>
<!-- p3&#45;&gt;a3 -->
<g id="edge3" class="edge">
<title>p3-&gt;a3</title>
<path fill="none" stroke="black" d="M63.34,-80.8C79.35,-80.8 98.82,-80.8 114.64,-80.8"></path>
</g>
<!-- a3&#45;&gt;broker -->
<g id="edge6" class="edge">
<title>a3-&gt;broker</title>
<path fill="none" stroke="black" d="M185.67,-88.54C199.45,-91.24 214.56,-94.2 227,-96.64"></path>
<polygon fill="black" stroke="black" points="185.95,-85.03 175.46,-86.54 184.6,-91.9 185.95,-85.03"></polygon>
</g>
<!-- a4 -->
<g id="node7" class="node">
<title>a4</title>
<polygon fill="#ffffff" stroke="black" points="190.43,-41.4 99.94,-41.4 99.94,-0.2 190.43,-0.2 190.43,-41.4"></polygon>
<text text-anchor="middle" x="145.19" y="-25" font-family="Times,serif" font-size="14.00">Monolithic</text>
<text text-anchor="middle" x="145.19" y="-8.2" font-family="Times,serif" font-size="14.00">Agent (filter)</text>
</g>
<!-- a4&#45;&gt;broker -->
<g id="edge7" class="edge">
<title>a4-&gt;broker</title>
<path fill="none" stroke="black" d="M185.52,-47.3C187.15,-48.47 188.75,-49.64 190.31,-50.8 201.45,-59.08 213.36,-68.55 223.79,-77.06"></path>
<polygon fill="black" stroke="black" points="187.46,-44.38 177.28,-41.46 183.41,-50.09 187.46,-44.38"></polygon>
<polygon fill="black" stroke="black" points="221.85,-79.99 231.8,-83.64 226.3,-74.59 221.85,-79.99"></polygon>
</g>
<!-- mongo -->
<g id="node8" class="node">
<title>mongo</title>
<path fill="#ffffff" stroke="black" d="M521.5,-116.53C521.5,-118.33 504.51,-119.8 483.6,-119.8 462.69,-119.8 445.71,-118.33 445.71,-116.53 445.71,-116.53 445.71,-87.07 445.71,-87.07 445.71,-85.27 462.69,-83.8 483.6,-83.8 504.51,-83.8 521.5,-85.27 521.5,-87.07 521.5,-87.07 521.5,-116.53 521.5,-116.53"></path>
<path fill="none" stroke="black" d="M521.5,-116.53C521.5,-114.72 504.51,-113.25 483.6,-113.25 462.69,-113.25 445.71,-114.72 445.71,-116.53"></path>
<text text-anchor="middle" x="483.6" y="-97.6" font-family="Times,serif" font-size="14.00">MongoDB</text>
</g>
<!-- logger -->
<g id="node10" class="node">
<title>logger</title>
<polygon fill="#ffffff" stroke="black" points="372.31,-119.8 318.31,-119.8 318.31,-83.8 372.31,-83.8 372.31,-119.8"></polygon>
<text text-anchor="middle" x="345.31" y="-97.6" font-family="Times,serif" font-size="14.00">logger</text>
</g>
<!-- broker&#45;&gt;logger -->
<g id="edge8" class="edge">
<title>broker-&gt;logger</title>
<path fill="none" stroke="black" d="M281.53,-101.8C289.86,-101.8 299.22,-101.8 308.13,-101.8"></path>
<polygon fill="black" stroke="black" points="308.28,-105.3 318.28,-101.8 308.28,-98.3 308.28,-105.3"></polygon>
</g>
<!-- logger&#45;&gt;mongo -->
<g id="edge9" class="edge">
<title>logger-&gt;mongo</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M372.59,-101.8C390.4,-101.8 414.45,-101.8 435.52,-101.8"></path>
<polygon fill="black" stroke="black" points="435.59,-105.3 445.59,-101.8 435.59,-98.3 435.59,-105.3"></polygon>
<text text-anchor="middle" x="408.98" y="-106" font-family="Times,serif" font-size="14.00">BSON</text>
</g>
</g>
</svg>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-net-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: MADS Network
</figcaption>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Remember that the above schematic represent <em>processes</em>, regardless the physical machine on which they are being executed.</p>
<p>For example, the whole network could run on a single workstation, or it could be conversely distributed over multiple devices connected to the same IP network, each device running a single process/node.</p>
</div>
</div>
<p>In the figure Figure&nbsp;1, the solid lines represent a <a href="https://zeromq.org">ZeroMQ</a> connection over TCP/IP, which uses compressed JSON as a data encoding protocol. Compression is preformed with the <a href="https://github.com/google/snappy">snappy</a> library. The dashed line, conversely, represents the proprietary MongoDB protocol, with data serialized as BSON (Binary-JSON).</p>
<section id="the-broker" class="level2">
<h2 class="anchored" data-anchor-id="the-broker">The broker</h2>
<p>What is the broker purpose?</p>
<p>The broker solves the issue of knowing multiple network addresses when you have a number of devices participating to the same distributed system.</p>
<p>With the aid of the broker, any separate device partaking to the MADS network only needs to know a single hostname/IP address: that of the machine running the broker.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>There can only be a single broker per network.</p>
</div>
</div>
<p>Running the broker is quite simple:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> broker</span></code></pre></div>
</section>
<section id="the-agents" class="level2">
<h2 class="anchored" data-anchor-id="the-agents">The agents</h2>
<p>Agents can be:</p>
<ul>
<li><strong>monolithic</strong>: implemented as a single executable inheriting the <code>Mads::Agent</code> C++ class.</li>
<li><strong>plug-in</strong>: a single executable that on runtime loads a proper plug-in (i.e.&nbsp;a dynamically loaded library)</li>
</ul>
<p>Regardless the type, agent can have three different behaviors:</p>
<ul>
<li><strong>source</strong>: they provide information to the network (e.g.&nbsp;by reading sensors)</li>
<li><strong>filter</strong>: they operate and transform received information</li>
<li><strong>sink</strong>: they consume information received from the network (e.g.&nbsp;to store or visualize)</li>
</ul>
<p>The MADS installer provides three general purpose agents, aptly named <code>source</code>, <code>filter</code>, and <code>sink</code>, that are designe do load proper plugins. The command <code>mads plugin</code> can be used to generate a suitable template for a new plugin to be developed.</p>
</section>
</section>
<section id="layout-and-requirements" class="level1">
<h1>Layout and requirements</h1>
<p>At the bare minimum, a MADS network requires:</p>
<ul>
<li>the broker</li>
<li>the MongoDB database</li>
<li>the logger agent</li>
</ul>
<p>The MADS installers provide broker and logger, but MongoDB must be installed separatedly. The easiest route is to it via Docker.</p>
<p>Ideally, broker, logger and database should run on a single machine, having enough resources to store the data flow on the database, while agents can be distributed over multiple device.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>According to our testing, Linux is the best choice for running MADS broker and logger in terms of performance.</p>
</div>
</div>
<p>Any other agent can be run on the same machine or on a separate machine. In the latter case, it must be started with the <code>-s</code> option stating the broker address, e.g.: <code>-s tcp://&lt;hostname&gt;:9092</code>, where <code>&lt;hostname&gt;</code> shall be replaced with the proper host name, if available, or with the machine IP address. This is the only address that any agent needs to know in order to connect to the MADS network.</p>
<p>To help you find out the proper address, you can use the <code>-n list</code> broker option:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> mads <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">broker</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> list</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Reading</span> settings from /Users/p4010/usr/local/etc/mads.ini <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">broker</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Using</span> network interface list</span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Available</span> network adapters:</span>
<span id="cb2-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span>       lo0] - 127.0.0.1</span>
<span id="cb2-6"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span>       <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">en0</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> 192.168.1.220</span>
<span id="cb2-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> bridge100] - 198.19.249.3</span>
<span id="cb2-8"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Binding</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">broker</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">frontend</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">XSUB</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">at</span> tcp://<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>:9090</span>
<span id="cb2-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Binding</span> broker backend <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">XPUB</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">at</span> tcp://<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>:9091</span>
<span id="cb2-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Binding</span> broker shared settings <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">REP</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">at</span> tcp://<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>:9092</span>
<span id="cb2-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Timecode</span> FPS: 25</span>
<span id="cb2-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Settings</span> are provided via tcp://127.0.0.1:9092</span>
<span id="cb2-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CTRL-C</span> to immediate exit</span>
<span id="cb2-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Type</span> P to pause, R to resume, I for information, Q to clean quit, X to restart and reload settings</span></code></pre></div>
<p>This shows that the host has three network interfaces. The public one is probably <code>en0</code> (your names may vary). Now quit the broker and relaunch it as:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> mads <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">broker</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> en0</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Reading</span> settings from /Users/p4010/usr/local/etc/mads.ini <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">broker</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Using</span> network interface en0</span>
<span id="cb3-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Binding</span> broker frontend <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">XSUB</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">at</span> tcp://<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>:9090</span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Binding</span> broker backend <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">XPUB</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">at</span> tcp://<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>:9091</span>
<span id="cb3-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Binding</span> broker shared settings <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">REP</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">at</span> tcp://<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>:9092</span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Timecode</span> FPS: 25</span>
<span id="cb3-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Settings</span> are provided via tcp://192.168.1.220:9092</span>
<span id="cb3-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CTRL-C</span> to immediate exit</span>
<span id="cb3-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Type</span> P to pause, R to resume, I for information, Q to clean quit, X to restart and reload settings</span></code></pre></div>
<p>Look at the line <code>Settings are provided via tcp://192.168.1.220:9092</code>: that is the address that you must use to start any agent in the network, e.g.:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> feedback <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> tcp://192.168.1.220:9092</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>-n</code> command line option <strong>has no effect</strong> on how the broker operates. Its only purpose is to help you find out the proper address to use when starting agents that run on different machines or devices.</p>
</div>
</div>
</section>
<section id="where-to-go-next" class="level1">
<h1>Where to go next</h1>
<p>Once you have the bare minimum running, the next step is to configure and customize your distributed steps. In detail, you will have to:</p>
<ol type="1">
<li>learn how to develop your custom agents. This can be done in three ways:
<ul>
<li>by developing your own monolithic agent, using the MADS C++17 library (<a href="../guides/monolithic_agents.html">hardest</a>, high performance and maximum flexibility)</li>
<li>by implementing a C++17 plugin (<a href="../guides/plugins.html">hard</a>, high performance, some compromise in flexibility)</li>
<li>by using the Python wrapper agent and implementing the details in Python (<a href="../guides/python_agent.html">easy</a>, limited performance and flexibility)</li>
</ul></li>
<li><a href="../guides/services.html">learn</a> how to make your agents into <strong>services</strong> (only on linux)</li>
<li>learn how to synchronize time on multiple devices</li>
<li>learn how to analyze the data collected by the MongoDB database</li>
</ol>


</section>

 ]]></description>
  <category>template</category>
  <category>basics</category>
  <category>easy</category>
  <guid>https://mads-net.github.io/guides/structure.html</guid>
  <pubDate>Tue, 03 Jun 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>How to contribute</title>
  <dc:creator>Paolo Bosetti</dc:creator>
  <link>https://mads-net.github.io/guides/contribute.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>These guides are prepared in <a href="https://quarto.org/" target="_blank">Quarto</a> format, which is a markdown-based format that allows for the creation of documents and websites with rich formatting and interactivity. The website structure is hosted on <a href="https://github.com/mads-net/mads-net.github.io" target="_blank">GitHub</a>, and contributions can be made through pull requests.</p>
</section>
<section id="set-up" class="level1">
<h1>Set-up</h1>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<ul>
<li>Git and a GitHub account</li>
<li>An IDE:
<ul>
<li><a href="https://posit.co/download/rstudio-desktop/" target="_blank">RStudio</a> (recommended)</li>
<li><a href="https://code.visualstudio.com/" target="_blank">Visual Studio Code</a></li>
</ul></li>
<li>If you opt for VS Code, you will need to install <a href="https://quarto.org" target="_blank">Quarto</a> and the <a href="https://marketplace.visualstudio.com/items?itemName=quarto.quarto" target="_blank">Quarto extension</a>. RStudio comes with Quarto pre-packaged.</li>
</ul>
</section>
<section id="forking-the-repository" class="level2">
<h2 class="anchored" data-anchor-id="forking-the-repository">Forking the repository</h2>
<p>To contribute to the MADS guides collection, you need to fork the repository. This allows you to create your own copy of the repository where you can make changes without affecting the original project. To fork the repository, follow these steps:</p>
<ol type="1">
<li>go to <a href="https://github.com/MADS-Net/mads-net.github.io" class="uri">https://github.com/MADS-Net/mads-net.github.io</a></li>
<li>click on the “Fork” button in the top right corner of the page</li>
<li>select your GitHub account as the destination for the fork</li>
<li>wait for GitHub to create the forked repository in your account</li>
</ol>
</section>
<section id="authorizing-your-computer" class="level2">
<h2 class="anchored" data-anchor-id="authorizing-your-computer">Authorizing your computer</h2>
<p>The best way to authorize your computer to work on GitHub repositories is to use the <code>gh</code> command line utility. You can get it from <a href="https://cli.github.com" target="_blank">https://cli.github.com</a>. Once installed, open a terminal and type:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> auth login</span></code></pre></div>
<p>then follow instructions to authenticate your GitHub account. This will allow you to push changes to your forked repository and create pull requests. It is typically done once per computer.</p>
</section>
<section id="cloning-the-repository" class="level2">
<h2 class="anchored" data-anchor-id="cloning-the-repository">Cloning the repository</h2>
<p>You cannot edit the official repository, but you can freely edit your forked repository. To do this, you need to clone the repository to your local machine. This creates a local copy of the repository that you can work on. To clone the repository, follow these steps:</p>
<ol type="1">
<li>open your terminal or command prompt</li>
<li>navigate to the directory where you want to clone the repository</li>
<li>type the following:</li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> repo clone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>your-username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/mads-net.github.io.git</span></code></pre></div>
<p>replacing <code>&lt;your-username&gt;</code> with your GitHub username. This will create a folder named <code>mads-net.github.io</code> in your current directory, containing the cloned repository. Then open the <code>mads_doc.Rproj</code> file if you are using RStudio. If you are using VSCode, just open that folder.</p>
</section>
</section>
<section id="creating-a-new-guide" class="level1">
<h1>Creating a new guide</h1>
<p>The <a href="../guides.html">Guides</a> page automatically presents the guides available in the <code>guides</code> folder of the repository. To create a new guide, follow these steps.</p>
<section id="ensure-your-repository-is-up-to-date" class="level2">
<h2 class="anchored" data-anchor-id="ensure-your-repository-is-up-to-date">Ensure your repository is up to date</h2>
<p>Other people could contribute to the guides while you are working on your own. To ensure that your repository is up to date and to minimize the risks for conflicts, you shall pull the latest changes from the original repository. To do this, follow these steps:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Navigate to the cloned repository folder</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> mads-net.github.io</span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fetch any new changes from the original repository</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> fetch upstream</span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># merge the changes into your local repository</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> merge upstream/main</span></code></pre></div>
</section>
<section id="create-a-new-guide" class="level2">
<h2 class="anchored" data-anchor-id="create-a-new-guide">Create a new guide</h2>
<p>To create a new guide, you can use the <code>guides/template.qmd</code> file as a starting point. This file contains the basic structure and formatting for a guide. Make a copy of it with a suitable name.</p>
<p>If the guide you are working is complex and is probably going to require images and/or data files, you should put the guide in a separate folder. For example, if you are writing a guide on “Data Analysis”, you could create a folder named <code>guides/data-analysis</code> and put the <code>data-analysis.qmd</code> file inside it. Quarto will automatically add that file as a new guide in the <a href="../guides.html">Guides</a> page listing. Images and supporting files can then be put in the same folder, and they will be automatically linked in the guide.</p>
</section>
<section id="edit-the-guide" class="level2">
<h2 class="anchored" data-anchor-id="edit-the-guide">Edit the guide</h2>
<p>The guide YAML preamble is the first thing to edit. Ensure that you set the <code>title</code>, <code>author</code>, and <code>date</code> fields correctly. You can also set the <code>categories</code> field to categorize your guide, and the <code>abstract</code> field to provide a brief description of the guide.</p>
<p>Note that the preamble has a <code>draft: true</code> field. This means that the guide will not be published until you set it to <code>draft: false</code>. This is useful to work on the guide without it being visible on the website or when previewing the website locally. A guide in draft mode will not be listed in the <a href="../guides.html">Guides</a> page, but it will be accessible via its URL.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you want that the guide is also available in PDF format, uncomment the preamble section for the <code>format</code> key. In this way, the guide will be available in both HTML and PDF formats.</p>
</div>
</div>
<p>Refer to the <a href="https://quarto.org/docs/guide/" target="_blank">Quarto documentation</a> for more information on how to format the guide using Quarto markdown.</p>
</section>
<section id="preview-the-guide" class="level2">
<h2 class="anchored" data-anchor-id="preview-the-guide">Preview the guide</h2>
<p>To preview the guide, you can use the <code>quarto preview</code> command. This will start a local web server and open the guide in your default web browser. To do this, follow these steps:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Navigate to the cloned repository folder</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> mads-net.github.io</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start the local web server</span></span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> preview</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled" title="Automatic refresh">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Automatic refresh
</div>
</div>
<div class="callout-body-container callout-body">
<p>The local web server will automatically refresh the page whenever you save changes to the guide files. This allows you to see the changes in real-time without having to manually refresh the page.</p>
<p>However, some changes (e.g.&nbsp;adding new files) are not always detected. In these cases, you can manually refresh the page in your browser to see the changes, and if it does not work, you can stop the server with <code>Ctrl+C</code> and restart it with <code>quarto preview</code>.</p>
</div>
</div>
</section>
<section id="publish-your-contribute" class="level2">
<h2 class="anchored" data-anchor-id="publish-your-contribute">Publish your contribute</h2>
<p>Whenever you are content with your contributed guide, you can commit your work and push it to your forked repository. <strong>before doing that, however</strong>, ensure that there are no new contribution on the <code>uspstream</code> repository. Since you cannot pull changes on your repository if it has pending changes, you first <strong>stash</strong> your changes, i.e.&nbsp;you put them temporarily aside, reverting back to a clean state (the last commit, in synchron with <code>upstream</code>):</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> stash</span></code></pre></div>
<p>Now you can pull the latest changes from the original repository:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch any new changes from the original repository</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> fetch upstream</span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge the changes into your local repository</span></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> merge upstream/main</span></code></pre></div>
<p>After this, you can reapply your changes:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> stash pop</span></code></pre></div>
<p>If there were new changes from <code>upstream</code>, and you have changed the same files, you might have to resolve conflicts. In this case, Git will show you the files with conflicts, and you will need to manually edit them to resolve the conflicts.</p>
<p>A conflict is typically marked in the file with <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>, <code>=======</code>, and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; upstream/main</code>. You need to choose which changes to keep, or merge them together, and then remove these markers. Once you are done, you can add the resolved files to the staging area, make a new commit and publish your changes on gitHub:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resolved conflicts and updated guide"</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push origin main</span></code></pre></div>
<p>Now <strong>your</strong> forked repository will be ahead of the original, <code>upstream</code>, repository. This means that you have changes that are not yet in the original repository. So you can now create a <em>pull request</em> to the original repository. This will allow the maintainers of the MADS guides collection to review your changes and merge them into the main repository. To create a pull request, follow these steps:</p>
<ol type="1">
<li>go to your forked repository on GitHub</li>
<li>click on the “Pull requests” tab</li>
<li>click on the “New pull request” button</li>
<li>select the branch you want to merge into the original repository (usually <code>main</code>)</li>
<li>review the changes and add a title and description for the pull request (be informative!!!)</li>
<li>click on the “Create pull request” button</li>
<li>wait for the maintainers to review your changes and merge them into the original repository</li>
</ol>


</section>
</section>

 ]]></description>
  <category>how-to</category>
  <category>easy</category>
  <guid>https://mads-net.github.io/guides/contribute.html</guid>
  <pubDate>Sun, 01 Jun 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Containerized MADS</title>
  <dc:creator>Paolo Bosetti</dc:creator>
  <link>https://mads-net.github.io/guides/containerized.html</link>
  <description><![CDATA[ 




<section id="contents" class="level1">
<h1>Contents</h1>
<p>Setting up a MADS network requires a minimum of a broker, a MongoDB server, and the logger agent. This guide explains the easiest and more portable solution to have them up and running in minuts in a Docker environment.</p>
</section>
<section id="prerequisites" class="level1">
<h1>Prerequisites</h1>
<p>You need to have Docker installed on your machine. If you don’t have it yet, you can follow the <a href="https://docs.docker.com/get-docker/">official installation guide</a>. Follow that guide thoroughly, and make sure you can run this command in your terminal:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run hello-world</span></code></pre></div>
</section>
<section id="running-the-mads-network" class="level1">
<h1>Running the MADS network</h1>
<p>The MADS Network is actually available as a <strong>compose</strong> network of three containers: the broker, the MongoDB server, and the logger agent. Docker has a <code>docker compose</code> command that allows to build and deploy multiple, synchronized containers properly sharing network communications.</p>
<p>To find more on <code>docker compose</code>, have a look at the <a href="https://docs.docker.com/compose/">documentation</a>.</p>
<section id="step-1.-clone-the-repo" class="level2">
<h2 class="anchored" data-anchor-id="step-1.-clone-the-repo">Step 1. Clone the repo</h2>
<p>All you need is in the <a href="https://github.com/MADS-NET/MADS_container">MADS_container</a> repository. You can clone it with the following command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--depth</span> 1 https://github.com/MADS-NET/MADS_container.git</span></code></pre></div>
</section>
<section id="step-2.-run-the-containers" class="level2">
<h2 class="anchored" data-anchor-id="step-2.-run-the-containers">Step 2. Run the containers</h2>
<p>You can now run the containers with the following command:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> compose up <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span></span></code></pre></div>
<p>This starts the three containerized processes: MogoDB, the broker, and the logger agent.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can stop the containers at any time with the command <code>docker compose down</code>.</p>
</div>
</div>
<p>Now the broker and the database are also accessible as if they were processes running on your host machine.</p>
</section>
<section id="update-images" class="level2">
<h2 class="anchored" data-anchor-id="update-images">Update images</h2>
<p>To update the images to the latest version, do:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> compose pull</span></code></pre></div>
<p>from project root (i.e.&nbsp;the same folder containing <code>compose.yml</code>).</p>


</section>
</section>

 ]]></description>
  <category>docker</category>
  <category>easy</category>
  <category>OS</category>
  <category>setup</category>
  <guid>https://mads-net.github.io/guides/containerized.html</guid>
  <pubDate>Sun, 01 Jun 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Python Agent</title>
  <dc:creator>Paolo Bosetti</dc:creator>
  <link>https://mads-net.github.io/guides/python_agent.html</link>
  <description><![CDATA[ 




<section id="contents" class="level1">
<h1>Contents</h1>
<p>The Python3 MADS agent is available on <a href="https://github.com/MADS-net/python_agent" class="uri">https://github.com/MADS-net/python_agent</a>.</p>
<section id="installing" class="level2">
<h2 class="anchored" data-anchor-id="installing">Installing</h2>
<p>You need to have <code>python3</code> and <code>python3-dev</code> installed, or Python3 on Windows.</p>
<p>Also, you need to have installed the latest <a href="https://github.com/pbosetti/MADS/releases">MADS version</a> and the proper build toolkit:</p>
<ul>
<li>on UNIX, this means cmake, clang, git</li>
<li>on Windows, this means Visual Studio 2022 (community edition is fine), git and cmake.</li>
</ul>
<p>Then proceed as follows depending on your platform.</p>
<section id="unix" class="level3">
<h3 class="anchored" data-anchor-id="unix">UNIX</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install numpy</span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># also install other necessary Python libs</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmake</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Bbuild</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-DCMAKE_INSTALL_PREFIX</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmake</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-j6</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> cmake <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--install</span> build</span></code></pre></div>
<p>The above is tested on MacOS and Ubuntu 22.04.</p>
</section>
<section id="windows" class="level3">
<h3 class="anchored" data-anchor-id="windows">Windows</h3>
<p>Run the following from project root:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode powershell code-with-copy"><code class="sourceCode powershell"><span id="cb2-1">python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m venv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">venv</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">venv</span>\Scripts\activate</span>
<span id="cb2-3">pip install numpy</span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># also install other necessary Python libs</span></span></code></pre></div>
<p>Then:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode powershell code-with-copy"><code class="sourceCode powershell"><span id="cb3-1">cmake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Bbuild <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DCMAKE_INSTALL_PREFIX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$(</span>mads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-2">cmake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>build build <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>config Release</span>
<span id="cb3-3">sudo cmake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>install build</span></code></pre></div>
<div class="callout callout-style-default callout-warning callout-titled" title="Enable sudo on Windows">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Enable sudo on Windows
</div>
</div>
<div class="callout-body-container callout-body">
<p>For <code>sudo</code> to work on Windows, you need to enable it on <em>Settings &gt; System &gt; For Developers</em> and set <em>Enable sudo</em> to On.</p>
</div>
</div>
</section>
</section>
<section id="executing" class="level2">
<h2 class="anchored" data-anchor-id="executing">Executing</h2>
<p>The new agent is installed as <code>mads-python</code>, so you can just type <code>mads python -h</code> (or <code>mads-python -h</code> on Windows) to know more:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> mads <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> ver. 1.2.6</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Usage:</span></span>
<span id="cb4-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">OPTION...</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-6"></span>
<span id="cb4-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-p,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--period</span> arg         Sampling period <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">default</span> 100 ms<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb4-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-m,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--module</span> arg         Python module to load</span>
<span id="cb4-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-n,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> arg           Agent name <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">default</span> to <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'python'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb4-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-i,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--agent-id</span> arg       Agent ID to be added to JSON frames</span>
<span id="cb4-11">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-s,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--settings</span> arg       Settings file path/URI</span>
<span id="cb4-12">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-S,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--save-settings</span> arg  Save settings to ini file</span>
<span id="cb4-13">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-v,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span>            Print version</span>
<span id="cb4-14">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-h,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--help</span>               Print usage</span></code></pre></div>
<p>Typically, to launch an agent named <code>python_source</code>, which gets its settings from a <code>python_source</code> section in <code>mads.ini</code>, and uses the Python module named <code>source</code> defined in the <code>source.py</code> file and that runs every 100 ms, the command is:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> python_source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p100</span></span></code></pre></div>
<p>where:</p>
<ul>
<li><code>-n python_source</code> sets the agent name to <code>python_source</code>, and gets its settings from the same section in the <code>mads.ini</code> file</li>
<li><code>-m source</code> sets the Python module to <code>source.py</code>, which is searched for in the Python modules search paths, see below</li>
<li><code>-p100</code> sets the sampling period to 100 ms</li>
</ul>
</section>
<section id="python-modules-search-paths" class="level2">
<h2 class="anchored" data-anchor-id="python-modules-search-paths">Python modules search paths</h2>
<p>The Python modules are searched for in the following folders:</p>
<ul>
<li><code>./python</code></li>
<li><code>./scripts</code></li>
<li><code>../python</code></li>
<li><code>../scripts</code></li>
<li><code>../../python</code></li>
<li><code>../../scripts</code></li>
<li><code>INSTALL_PREFIX + /python</code></li>
<li><code>INSTALL_PREFIX + /scripts</code></li>
</ul>
<p>plus any path listed in the <code>mads.ini</code> file under the <code>search_path</code> key (an array or a single string).</p>
</section>
<section id="the-mads.ini-section" class="level2">
<h2 class="anchored" data-anchor-id="the-mads.ini-section">The <code>mads.ini</code> section</h2>
<p>The following fields are typically used:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[python_source]</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">period </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb6-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">venv </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "/path/to/.venv"</span></span>
<span id="cb6-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">python_module </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "my_source"</span></span>
<span id="cb6-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">search_paths </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ["/path/to/python/folder"</span></span></code></pre></div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>The section name must match the <code>-m</code> option argument when you launch the agent, so in the case aboxe you must use <code>-m python_source</code>.</p>
</div>
</div>
<p>During <strong>development</strong>, you typically run the plugin interactively and using a python module that is under your home folder. In these conditions, you probably want to set the module name on the command line, such as <code>mads python -n python_source -m my_module</code>. This means that you must have the file <code>my_module.py</code> in the <code>python</code> or <code>scripts</code> subfolder of your current working directory.</p>
<p>During <strong>deployment</strong>, you want to transform the agent in a service, so that you rely on the module to be loaded according to the <code>&nbsp;mads.ini</code> file (from the <code>python_module</code> key), and the module is expected to be placed in <code>&lt;INSTALL_PREFIX&gt;/python/my_module.py</code>. Since <code>INSTALL_PREFIX</code> is usually <code>/usr/local</code>, this means that the file should be in <code>/usr/local/python/my_module.py</code>. Then you create a service as documented <a href="services.html">here</a>.</p>
</section>
<section id="module-types" class="level2">
<h2 class="anchored" data-anchor-id="module-types">Module Types</h2>
<p>Python modules can be of type <code>source</code>, <code>filter</code>, or <code>sink</code>. The module type is defined by setting a top level variable like this, typically at the beginning of the script, just after the various <code>import</code>s:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">agent_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sink"</span></span></code></pre></div>
<p>All the modules <strong>must</strong> implement a <code>setup()</code> function, which is expected to use the dictionary available in the module variable <code>params</code> (a dictionary)&nbsp;to do initial setup (opening ports or files, etc.)</p>
<p><strong>Source</strong> modules <strong>must</strong> implement a <code>get_output()</code> function, that produces the JSON string that will be published.</p>
<p><strong>Filter</strong> modules <strong>must</strong> implement a <code>process()</code> function, that is supposed to operate on the last received data dictionary (available as <code>data</code>, a module variable) and produce a JSON string that will be published.</p>
<p><strong>Sink</strong> modules <strong>must</strong> implement a <code>deal_with_data()</code> function, that operates on the <code>data</code> dictionary, a module variable.</p>
</section>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>To be completed</p>
</div>
</div>
<hr>


</section>

 ]]></description>
  <category>python</category>
  <category>agent</category>
  <category>easy</category>
  <guid>https://mads-net.github.io/guides/python_agent.html</guid>
  <pubDate>Sun, 01 Jun 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>ZeroConf (aka Avahi) network discovery</title>
  <dc:creator>Paolo Bosetti</dc:creator>
  <link>https://mads-net.github.io/guides/zeroconf.html</link>
  <description><![CDATA[ 




<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>Using IP addresses for accessing other machines is bad practice, for The IP address of a given machine can change unexpectedly — for example, because it has been assigned by a DHCP server from a dynamic pool of available IPs.</p>
<p>Much more preferable is to use hostnames, that map to IP addresses dynamically. On the other hand, This requires a DNS server properly configured and updated.</p>
<p>ZeroConf comes to the rescue: it is an open protocol where all nodes on the same network advertise their services (ports) and host names by broadcasting, and by sharing the same, default local domain: <code>.local</code>.</p>
<p>The name ZeroConf is a bit misleading, for actually <em>there is</em> a configuration step, although it’s minimal and simple. The configuration, additionally, is <em>node local</em>, decentralized, and there is no need for any central server.</p>
</section>
<section id="how-to-enable-zeroconf" class="level1">
<h1>How to enable ZeroConf</h1>
<p>On MacOS systems, Zeroconf is automatically available, so if your machine name is <code>MyMac</code>, your machine is available on the local network as <code>MyMac.local</code> (case insensitive!).</p>
<p>On Linux, the same protocol and service goes under the name of <code>Avahi</code>. To enable it, do the following steps.</p>
<section id="install-the-needed-packages" class="level2">
<h2 class="anchored" data-anchor-id="install-the-needed-packages">Install the needed packages</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt update <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install avahi-utils avahi-daemon openssh-server</span></code></pre></div>
</section>
<section id="configure-the-service" class="level2">
<h2 class="anchored" data-anchor-id="configure-the-service">Configure the service</h2>
<p>Create a file named <code>/stc/avahi/services/ssh.service</code> with the following content:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;!-- See avahi.service(5) for more information about this configuration file --&gt;</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">service-group</span>&gt;</span>
<span id="cb2-4"></span>
<span id="cb2-5">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">name</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> replace-wildcards=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>&gt;%h&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">name</span>&gt;</span>
<span id="cb2-6"></span>
<span id="cb2-7">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">service</span>&gt;</span>
<span id="cb2-8">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">type</span>&gt;_ssh._tcp&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">type</span>&gt;</span>
<span id="cb2-9">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">port</span>&gt;22&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">port</span>&gt;</span>
<span id="cb2-10">  &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">service</span>&gt;</span>
<span id="cb2-11"></span>
<span id="cb2-12">&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">service-group</span>&gt;</span></code></pre></div>
<p>This is making the host accessible as <code>%h.local</code>, where <code>%h</code> is a wildcard for the current hostname, and also advertising the ssh servoice on TCP port 22.</p>
<p>The list of services advertised on the local network can be obtained with:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">avahi-browse</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-a</span></span></code></pre></div>
</section>
<section id="apply-the-changes" class="level2">
<h2 class="anchored" data-anchor-id="apply-the-changes">Apply the changes</h2>
<p>Remember to enable and start the service:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> systemctl enable avahi-daemon</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> systemctl start avahi-daemon</span></code></pre></div>
<p>Now you can use <code>&lt;hostname&gt;.local</code> in place of its address: for example, when launching MADS agents, supposing the the broker is running on a device with hostname set to <code>mads-broker</code>, you can simply do:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mads</span> source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> tcp://mads-broker.local:9092 my_plugin.plugin</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>networking</category>
  <category>IP</category>
  <category>configuration</category>
  <category>OS</category>
  <category>Linux</category>
  <guid>https://mads-net.github.io/guides/zeroconf.html</guid>
  <pubDate>Sun, 01 Jun 2025 22:00:00 GMT</pubDate>
</item>
</channel>
</rss>
