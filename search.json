[
  {
    "objectID": "guides/structure.html",
    "href": "guides/structure.html",
    "title": "Network structure",
    "section": "",
    "text": "Architecture\nThe typical architecture of a MADS network can be represented as:\n\n\n\n\n\n\n\n\nMADS Network\n\n\n\np1\n\nPlugin 1\n\n\n\na1\n\nAgent 1\n(source)\n\n\n\np1-&gt;a1\n\n\n\n\nbroker\n\nbroker\n\n\n\na1-&gt;broker\n\n\n\n\n\np2\n\nPlugin 2\n\n\n\na2\n\nAgent 2\n(filter)\n\n\n\np2-&gt;a2\n\n\n\n\na2-&gt;broker\n\n\n\n\n\n\np3\n\nPlugin 3\n\n\n\na3\n\nAgent 3\n(sink)\n\n\n\np3-&gt;a3\n\n\n\n\na3-&gt;broker\n\n\n\n\n\na4\n\nMonolithic\nAgent (filter)\n\n\n\na4-&gt;broker\n\n\n\n\n\n\nmongo\n\n\nMongoDB\n\n\n\nlogger\n\nlogger\n\n\n\nbroker-&gt;logger\n\n\n\n\n\nlogger-&gt;mongo\n\n\nBSON\n\n\n\n\n\n\nFigure 1: MADS Network\n\n\n\n\n\nAgents can be:\n\nmonolithic: implemented as a single executable inheriting the Mads::Agent C++ class.\nplug-in: a single executable that on runtime loads a proper plug-in (i.e. a dynamically loaded library)\n\nRegardless the type, agent can have three different behaviors:\n\nsource: they provide information to the network (e.g. by reading sensors)\nfilter: they operate and transform received information\nsink: they consume information received from the network (e.g. to store or visualize)\n\nThe MADS installer provides three general purpose agents, aptly named source, filter, and sink, that are designe do load proper plugins. The command mads plugin can be used to generate a suitable template for a new plugin to be developed.\nIn the figure Figure 1, the solid lines represent a ZeroMQ connection over TCP/IP, which uses compressed JSON as a data encoding protocol. Compression is preformed with the snappy library.\n\n\nLayout and requirements\n\n\n\n\n\n\nNote\n\n\n\nTo be done.\n\n\n\n\nHow to develop a plugin\n\n\n\n\n\n\nNote\n\n\n\nTo be done.\n\n\n\n\nHow to deal with time\n\n\n\n\n\n\nNote\n\n\n\nTo be done."
  },
  {
    "objectID": "guides/python_agent.html",
    "href": "guides/python_agent.html",
    "title": "Python Agent",
    "section": "",
    "text": "The Python3 MADS agent is available on https://github.com/MADS-net/python_agent.\n\n\nYou need to have python3 and python3-dev installed. Then proceed as follows depending on your platform.\n\n\npython3 -m venv .venv\nsource .venv/bin/activate\npip install numpy\n# also install other necessary Python libs\n\ncmake -Bbuild -DCMAKE_INSTALL_PREFIX=\"$(mads -p)\"\ncmake --build build -j6\nsudo cmake --install build\nThe above is tested on MacOS and Ubuntu 22.04.\n\n\n\nRun the following from project root:\npython -m venv .venv\n.venv\\Scripts\\activate\npip install numpy\n# also install other necessary Python libs\nThen:\ncmake -Bbuild -DCMAKE_INSTALL_PREFIX=\"$(mads -p)\"\ncmake --build build --config Release\nsudo cmake --install build\n\n\n\n\n\n\nEnable sudo on Windows\n\n\n\nFor sudo to work on Windows, you need to enable it on Settings &gt; System &gt; For Developers and set Enable sudo to On.\n\n\n\n\n\n\nThe new agent is installed as mads-python, so you can just type mads python -h (or mads-python -h on Windows) to know more:\n&gt; mads python -h\npython ver. 1.2.6\n\nUsage:\n  python [OPTION...]\n\n  -p, --period arg         Sampling period (default 100 ms)\n  -m, --module arg         Python module to load\n  -n, --name arg           Agent name (default to 'python')\n  -i, --agent-id arg       Agent ID to be added to JSON frames\n  -s, --settings arg       Settings file path/URI\n  -S, --save-settings arg  Save settings to ini file\n  -v, --version            Print version\n  -h, --help               Print usage\nTypically, to launch an agent named python_source, which gets its settings from a python_source section in mads.ini, and uses the Python module named source defined in the source.py file and that runs every 100 ms, the command is:\nmads python -n python_source -m source -p100\nwhere:\n\n-n python_source sets the agent name to python_source, and gets its settings from the same section in the mads.ini file\n-m source sets the Python module to source.py, which is searched for in the Python modules search paths, see below\n-p100 sets the sampling period to 100 ms\n\n\n\n\nThe Python modules are searched for in the following folders:\n\n./python\n./scripts\n../python\n../scripts\n../../python\n../../scripts\nINSTALL_PREFIX + /python\nINSTALL_PREFIX + /scripts\n\nplus any path listed in the mads.ini file under the search_path key (an array or a single string).\n\n\n\nThe following fields are typically used:\n[python_source]\nperiod = 200\nvenv = \"/path/to/.venv\"\npython_module = \"my_source\"\nsearch_paths = [\"/path/to/python/folder\"\n\n\n\n\n\n\nWarning\n\n\n\nThe section name must match the -m option argument when you launch the agent, so in the case aboxe you must use -m python_source.\n\n\n\n\n\nPython modules can be of type source, filter, or sink. The module type is defined by setting a top level variable like this, typically at the beginning of the script, just after the various imports:\nagent_type = \"sink\"\nAll the modules must implement a setup() function, which is expected to use the dictionary available in the module variable params (a dictionary) to do initial setup (opening ports or files, etc.)\nSource modules must implement a get_output() function, that produces the JSON string that will be published.\nFilter modules must implement a process() function, that is supposed to operate on the last received data dictionary (available as data, a module variable) and produce a JSON string that will be published.\nSink modules must implement a deal_with_data() function, that operates on the data dictionary, a module variable."
  },
  {
    "objectID": "guides/python_agent.html#installing",
    "href": "guides/python_agent.html#installing",
    "title": "Python Agent",
    "section": "",
    "text": "You need to have python3 and python3-dev installed. Then proceed as follows depending on your platform.\n\n\npython3 -m venv .venv\nsource .venv/bin/activate\npip install numpy\n# also install other necessary Python libs\n\ncmake -Bbuild -DCMAKE_INSTALL_PREFIX=\"$(mads -p)\"\ncmake --build build -j6\nsudo cmake --install build\nThe above is tested on MacOS and Ubuntu 22.04.\n\n\n\nRun the following from project root:\npython -m venv .venv\n.venv\\Scripts\\activate\npip install numpy\n# also install other necessary Python libs\nThen:\ncmake -Bbuild -DCMAKE_INSTALL_PREFIX=\"$(mads -p)\"\ncmake --build build --config Release\nsudo cmake --install build\n\n\n\n\n\n\nEnable sudo on Windows\n\n\n\nFor sudo to work on Windows, you need to enable it on Settings &gt; System &gt; For Developers and set Enable sudo to On."
  },
  {
    "objectID": "guides/python_agent.html#executing",
    "href": "guides/python_agent.html#executing",
    "title": "Python Agent",
    "section": "",
    "text": "The new agent is installed as mads-python, so you can just type mads python -h (or mads-python -h on Windows) to know more:\n&gt; mads python -h\npython ver. 1.2.6\n\nUsage:\n  python [OPTION...]\n\n  -p, --period arg         Sampling period (default 100 ms)\n  -m, --module arg         Python module to load\n  -n, --name arg           Agent name (default to 'python')\n  -i, --agent-id arg       Agent ID to be added to JSON frames\n  -s, --settings arg       Settings file path/URI\n  -S, --save-settings arg  Save settings to ini file\n  -v, --version            Print version\n  -h, --help               Print usage\nTypically, to launch an agent named python_source, which gets its settings from a python_source section in mads.ini, and uses the Python module named source defined in the source.py file and that runs every 100 ms, the command is:\nmads python -n python_source -m source -p100\nwhere:\n\n-n python_source sets the agent name to python_source, and gets its settings from the same section in the mads.ini file\n-m source sets the Python module to source.py, which is searched for in the Python modules search paths, see below\n-p100 sets the sampling period to 100 ms"
  },
  {
    "objectID": "guides/python_agent.html#python-modules-search-paths",
    "href": "guides/python_agent.html#python-modules-search-paths",
    "title": "Python Agent",
    "section": "",
    "text": "The Python modules are searched for in the following folders:\n\n./python\n./scripts\n../python\n../scripts\n../../python\n../../scripts\nINSTALL_PREFIX + /python\nINSTALL_PREFIX + /scripts\n\nplus any path listed in the mads.ini file under the search_path key (an array or a single string)."
  },
  {
    "objectID": "guides/python_agent.html#the-mads.ini-section",
    "href": "guides/python_agent.html#the-mads.ini-section",
    "title": "Python Agent",
    "section": "",
    "text": "The following fields are typically used:\n[python_source]\nperiod = 200\nvenv = \"/path/to/.venv\"\npython_module = \"my_source\"\nsearch_paths = [\"/path/to/python/folder\"\n\n\n\n\n\n\nWarning\n\n\n\nThe section name must match the -m option argument when you launch the agent, so in the case aboxe you must use -m python_source."
  },
  {
    "objectID": "guides/python_agent.html#module-types",
    "href": "guides/python_agent.html#module-types",
    "title": "Python Agent",
    "section": "",
    "text": "Python modules can be of type source, filter, or sink. The module type is defined by setting a top level variable like this, typically at the beginning of the script, just after the various imports:\nagent_type = \"sink\"\nAll the modules must implement a setup() function, which is expected to use the dictionary available in the module variable params (a dictionary) to do initial setup (opening ports or files, etc.)\nSource modules must implement a get_output() function, that produces the JSON string that will be published.\nFilter modules must implement a process() function, that is supposed to operate on the last received data dictionary (available as data, a module variable) and produce a JSON string that will be published.\nSink modules must implement a deal_with_data() function, that operates on the data dictionary, a module variable."
  },
  {
    "objectID": "guides.html",
    "href": "guides.html",
    "title": "Guides",
    "section": "",
    "text": "Note\n\n\n\nGuides are open to contribution: fork the repo https://github.com/mads-net/mads-net.github.io, make some changes, and submit a pull request.\n\n\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Title\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitle\n\n\n\nAuthor\n\n\n\nDescription\n\n\n\nCategories\n\n\n\nReading Time\n\n\n\n\n\n\n\n\nJun 4, 2025\n\n\nNetwork structure\n\n\nPaolo Bosetti\n\n\nIllustrate a typical MADS network structure and its requirements. \n\n\ntemplate\n\n\n2 min\n\n\n\n\n\n\nJun 2, 2025\n\n\nContainerized MADS\n\n\nPaolo Bosetti\n\n\nThe base agents for setting up a MADS network are available as a ontainerized environment. \n\n\ndocker, container, setup\n\n\n2 min\n\n\n\n\n\n\nJun 2, 2025\n\n\nPython Agent\n\n\nPaolo Bosetti\n\n\nThe python_agent repo on GitHub provides a MADS agent with an embedded python3 interpreter for developing MADS sgents in Python \n\n\npython, agent\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MADS: Multi-Agent Distributed System",
    "section": "",
    "text": "What is it\nMADS-NET is a simple framework for implementing a network of distributed agents that can exchange information via ZeroMQ.\nIt is made by a main set of executables available in the MADS tools collection repo, which also provides installers for Linux, MacOS and Windows.\nThe MADS tools collection includes a broker and a set of general purpose agents that can act as sources, filters, or sinks. The actual operations performed by agents can be customized either via scripting languages (using simple popen interface), or by implementing dedicated plugins in C++.\nSome of the available plugins are:\n\narduino_plugin: reads from a serial connected arduino\nhpe2D_plugin: performs human pose estimation from a camera stream\nmqtt_plugin: acts as a bridge with an MQTT network\nsay_plugin: Text-to-speech of incoming messages\nble_plugin: Bluetooth Low Energy source plugin\ntui_plugin: Terminal User Interface for sending metadata commands to MADS network\nlua_plugin: Interfacing Lua scripts to the MADS network (useful for prototyping and rapid development)\n\nThere are also additional monolithic agents:\n\npython_agent: Interfacing Python3 scripts to the MADS network (useful for prototyping and rapid development)\n\nLook into the guides section for more information on how to use the MADS tools collection."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "MADS-Net"
  },
  {
    "objectID": "guides/containerized.html",
    "href": "guides/containerized.html",
    "title": "Containerized MADS",
    "section": "",
    "text": "Setting up a MADS network requires a minimum of a broker, a MongoDB server, and the logger agent. This guide explains the easiest and more portable solution to have them up and running in minuts in a Docker environment."
  },
  {
    "objectID": "guides/containerized.html#step-1.-clone-the-repo",
    "href": "guides/containerized.html#step-1.-clone-the-repo",
    "title": "Containerized MADS",
    "section": "Step 1. Clone the repo",
    "text": "Step 1. Clone the repo\nAll you need is in the MADS_container repository. You can clone it with the following command:\ngit clone --depth 1 https://github.com/MADS-NET/MADS_container.git"
  },
  {
    "objectID": "guides/containerized.html#step-2.-build-contaners",
    "href": "guides/containerized.html#step-2.-build-contaners",
    "title": "Containerized MADS",
    "section": "Step 2. Build contaners",
    "text": "Step 2. Build contaners\nIn the MADS_container directory, you can build the containers with the following command:\ndocker compose build\n\n\n\n\n\n\nNote\n\n\n\nThis is only to be done once."
  },
  {
    "objectID": "guides/containerized.html#step-3.-run-the-containers",
    "href": "guides/containerized.html#step-3.-run-the-containers",
    "title": "Containerized MADS",
    "section": "Step 3. Run the containers",
    "text": "Step 3. Run the containers\nYou can now run the containers with the following command:\ndocker compose up\nThis starts the three containerized processes: MogoDB, the broker, and the logger agent in terminal attached mode: this means that you can read the logs and stop all three containers at once by pressing Ctrl-C.\nOnce you are sure that everything works as expected, you may start the containers in detached mode with the following command:\ndocker compose up -d\n\n\n\n\n\n\nNote\n\n\n\nYou can stop the containers at any time with the command docker compose down.\n\n\nNow the broker and the database are also accessible as if they were processes running on your host machine."
  }
]